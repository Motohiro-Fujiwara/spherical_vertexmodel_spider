/* *  Created by Motohiro Fujiwara(motohiro.fujiwara@brh.co.jp) on 2021/05/14. Revesion 2022/04/30 */#include <iostream>#include <fstream>#include <vector>#include <math.h>#include <stdio.h>#include <stdlib.h>#include <time.h>#include <sstream>#include <iomanip>using namespace std;double uniform(void);double Uniform(void){    return ((double)rand()+1.0)/((double)RAND_MAX+2.0);}double rand_normal(double mu, double sigma){    double z=sqrt(-2.0*log(Uniform())) * sin(2.0*M_PI*Uniform());    return mu + sigma*z;}const int pmax=5;//steady-state10const int omax=1;//diffusionconst int smax=1;//diffusionconst int qmax=5000;//step//10000const int tmax=1;//step-2//2const double tf=0.0416667;//1/24const double k_1=0.0001;//Area 0.001 0.00015const double k_2=0.00005;//perimeter 0.00015 0.00005const double k_3=0.0001;//edge 0.00005 0.0001//const double k_3_1=-0.00001;//edge-negative 0.00001const double k_4=0.03;//vertex-yolk tissue 0.01const double k_5=0.0005;//vertex-tissue growth 0.0005const double tissue_r0=270;const double d_0=6;//diffusion1const double d_1=70;//diffusion2const double d_2=40;//diffusion3const double d_3=3;//diffusion3const double s_0=1;//suppression1const double s_1=2;//suppression2 //const double s_2=1;//suppression3const double s_3=1;//suppression3const double p_0=1;//promotion1 1.1const double p_1=1;//promotion2const double p_2=1;//promotion3const double p_3=1;//promotion3const double b_0=1;//decomposition1const double b_1=1;//decomposition2const double b_2=2;//decomposition3const double b_3=1;//decomposition2const double hh=5;//stable quantityconst double u0=1;const double v0=1;const double w0=1;class Vertex {public:	double coordinate[3];//origin    double r_vector[3];//vector in 3D, coordinate origin is starting point	double r_vector_2d[3];//vector in 2D, coordinate origin is starting point	double r_vector_2dz[3];//z-axis rotation	double coordinate_h[3];//vertex coordinate, coordinate origin is Center of Gravity in 3D	double coordinate_hy[3];//y-axis rotation, coordinate origin is Center of Gravity in 3D	double xy_coordinate[3];//vertex coordinate in 2D,  coordinate origin is Center of Gravity in 2D	double xy_coordinate_z[3];//z-axis rotation		vector<int> NeighborCell;	vector<int> NeighborVertex;	int Edge_Vertex[2];	int Edge_Area[2];	int T1_flag;	double Fx, Fy, Fz;	double R_edge;	double sita_edge;	double k_api;	double af;	int vertex_type;	double vertex_r;	double vertex_r0;	double k_ball;	int tissue_nc_center;};class Cell  {public:	int i,j;	vector<int> GroupVertex;	vector<int> GroupVertex_divi;	vector<int> GroupVertex_T1;	vector<int> GroupVertex_T2;	vector<Vertex> GroupVertex_h;	vector<int> GroupEdge;	vector<int> GroupEdge_divi;	vector<int> GroupEdge_T1;	vector<int> GroupEdge_T2;	vector<Vertex> GroupEdge_h;		int cell_type;//cell type number	int cell_lineage;//cell linage number	int cell_hh;//Hedgehog signaling in cell	double k_area;//cell parameter	double k_peri;	double k_tiss;		double Area;// cell area	double Area_x;//cell area related x coordinate	double Area_y;//cell area related y coordinate	double Area_z;//cell area related z coordinate	double Area0;// initial cell area    double Area0_x;    double Area0_y;    double Area0_z;	double Area0_0;	double Area0_00;	double Perimeter;//cell perimeter	double Perimeter0;//initial cell perimeter	double Long_axis;//long axis of ellipse of cell geometry	double Short_axis;//short axis of ellipse of cell geometry	double ramuda[2];//eigenvalue of Moment of cell geometry	double u_ramuda1[2];//eigenvector of Moment of cell geometry in cell aspect	double u_ramuda2[2];	double u_ramuda1_3dy[3];//eigenvector of Tensor of cell geometry	double u_ramuda2_3dy[3];	double u_ramuda1_3d[3];//eigenvector of Tensor of cell geometry in 3D	double u_ramuda2_3d[3];	double gra1;//gradient of eigenvector	double gra2;		double n_vector[3];//normal vector of cell asoect	double n_vector_2d[3];	double n_vector_2dz[3];	double sita;//normal vector angle1	double fai;//normal vector angle2		double Mxx;//Tensor of cell geometry in 2D	double Myy;	double Mxy;	double Mxx_t;//diagonalized tensor	double Myy_t;	    double Sxx;//Matrix related to stress	double Syy;    double Sxy;    double S1;//diagonalized Matrix related to stress    double S2;    double Theta1;//angle1 of diagonalized Matrix related to stress    double Theta2;//angle2 of diagonalized Matrix related to stress		double centroid[3];//center of gravity of cell in 3D	double centroid_2d[3];//center of gravity of cell in 2D, coordinate origin is starting point	double centroid_2dy[3];//y-axis rotation of center of gravity coordinates    double cent_dr[3];//Deviation between center of gravity of cell coordinates and coordinate origin	double tiss_cent_dr[3];//Deviation between vertex coordinate of cell and center of gravity of cell	double tiss_growth[3];//tissue growth		double time_division;//cell division	int division_count;	int axis_division;	double cell_rand;//variation		double diff[4];//diffusion	double d_diff[4];	double D_0;//diffusion parameter	double D_1;//diffusion parameter	double D_2;    double D_3;	double S_0;//suppression parameter	double S_1;//suppression parameter	double S_2;    double S_3;	double P_0;//promotion parameter	double P_1;//promotion parameter    double P_2;    double P_3;	double B_0;//decomposition parameter    double B_1;//decomposition parameter    double B_2;    double B_3;	double HH;//extra	};class Tissue {public:	int i,imax,imax_d,j,jmax,k,kmax,l,lmax,m,mmax;	double dt;	double dt_R;//reaction delta time	double dt_D;//difuusion delta time	double E; //energy	double Area_ave1; //celltype1,3,5	double Area_ave2;//celltype6	double Perimeter_ave1; //celltype1,3,5	double diff_ave1;//diffusion1	double diff_ave2;//diffusion2	int i_north; //north pole    int tail_boundary;	int flag_ogi;	int time_step;		vector<Cell> Cellnum;	vector<Vertex> Vertices;	vector<Vertex> Edge;		int cell_p1;    int cell_p2;	int T1_count;	int T2_count;	double tissue_center[3];//tissue center position		//function	void firststage();	void cellgroup();	void firstset_cell();	void Geometory_cell();	void VertexDynamics();	void Division(int p);	void Growth(int p);	void T1_cell();	void T2_cell();	void Reaction();	void Diffusion();		//output	ofstream ofs[qmax];	void output(int p);	void output_result();	void output_barometer(int c);	ofstream ofs_result[15];	ofstream ofs_barometer[13];};void Tissue::firststage() {	//Vertex	i=0;	ifstream ifs0("/filelocation/initial_setting_cell1840/vertex_result.dat");	string reading_line0;	// read by line	while (getline(ifs0, reading_line0)) {		Vertices.push_back(Vertex());//element adding		sscanf(reading_line0.data(), "%lf	%lf %lf", &Vertices[i].coordinate[0], &Vertices[i].coordinate[1], &Vertices[i].coordinate[2]);		i++;	}		i=0;	ifstream ifs1("/filelocation/initial_setting_cell1840/neighborcell_result.dat");	string reading_line1;	// read by line	while (getline(ifs1, reading_line1)) {		Vertices[i].NeighborCell.push_back(int());//element adding		Vertices[i].NeighborCell.push_back(int());//element adding		Vertices[i].NeighborCell.push_back(int());//element adding		sscanf(reading_line1.data(), "%d	%d	%d", &Vertices[i].NeighborCell[0], &Vertices[i].NeighborCell[1], &Vertices[i].NeighborCell[2]);		i++;	}		i=0;	ifstream ifs2("/filelocation/initial_setting_cell1840/neighborvertex_result.dat");	string reading_line2;	// read by line	while (getline(ifs2, reading_line2)) {		Vertices[i].NeighborVertex.push_back(int());//element adding		Vertices[i].NeighborVertex.push_back(int());//element adding		Vertices[i].NeighborVertex.push_back(int());//element adding		sscanf(reading_line2.data(), "%d	%d	%d", &Vertices[i].NeighborVertex[0], &Vertices[i].NeighborVertex[1], &Vertices[i].NeighborVertex[2]);		i++;	}		//Edge	i=0;	ifstream ifs3("/filelocation/initial_setting_cell1840/edge-vertex_result.dat");	string reading_line3;	// read by line	while (getline(ifs3, reading_line3)) {		Edge.push_back(Vertex());//element adding		sscanf(reading_line3.data(), "%d	%d", &Edge[i].Edge_Vertex[0], &Edge[i].Edge_Vertex[1]);		i++;	}		i=0;	ifstream ifs4("/filelocation/initial_setting_cell1840/edge-cell_result.dat");	string reading_line4;	// read by line	while (getline(ifs4, reading_line4)) {		sscanf(reading_line4.data(), "%d	%d", &Edge[i].Edge_Area[0], &Edge[i].Edge_Area[1]);		i++;	}		cout << "a0a" << endl;}void Tissue::cellgroup() {	//Vertex	i=0;	const char delimiter ='	';	ifstream ifs5("/filelocation/initial_setting_cell1840/cell-vertex_result.dat");	string reading_line5;	// read by line	while (getline(ifs5, reading_line5)) {		j=0;		Cellnum.push_back(Cell());		string separated_string;		istringstream line_separater(reading_line5);		while (getline(line_separater, separated_string, delimiter)) {			Cellnum[i].GroupVertex.push_back(0);			sscanf(separated_string.data(), "%d", &Cellnum[i].GroupVertex[j]);			j++;		}		i++;	}	//Edge	i=0;	ifstream ifs6("/filelocation/initial_setting_cell1840/cell-edge_result.dat");	string reading_line6;	// read by line	while (getline(ifs6, reading_line6)) {		j=0;		string separated_string;		istringstream line_separater(reading_line6);		while (getline(line_separater, separated_string, delimiter)) {			Cellnum[i].GroupEdge.push_back(0);			sscanf(separated_string.data(), "%d", &Cellnum[i].GroupEdge[j]);			j++;		}		i++;	}	cout << "a1a" << endl;	}void Tissue::firstset_cell() {//parameter	dt=12.0;//time Euler method mechanics	dt_R=0.001;//time Euler method reaction    dt_D=0.001;//time Euler method diffusion	time_step=0;		imax=Cellnum.size();	for (i=0; i<imax; i++) {        Cellnum[i].k_area=k_1*0;		Cellnum[i].k_peri=k_2*0;		Cellnum[i].k_tiss=k_5*0;	}		imax=Vertices.size();	for (i=0; i<imax; i++) {        Vertices[i].k_ball=k_4*0;	}		imax=Cellnum.size();	for (i=0; i<imax; i++) {		Cellnum[i].D_0=0;        Cellnum[i].D_1=0;        Cellnum[i].D_2=0;        Cellnum[i].D_3=0;		Cellnum[i].S_0=0;        Cellnum[i].S_1=0;		Cellnum[i].S_2=0;        Cellnum[i].S_3=0;		Cellnum[i].P_0=0;		Cellnum[i].P_1=0;		Cellnum[i].P_2=0;        Cellnum[i].P_3=0;		Cellnum[i].B_0=0;        Cellnum[i].B_1=0;        Cellnum[i].B_2=0;        Cellnum[i].B_3=0;	}		imax=Cellnum.size();	for (i=0; i<imax; i++) {		Cellnum[i].diff[0]=0;		Cellnum[i].diff[1]=0;		Cellnum[i].diff[2]=0;		Cellnum[i].diff[3]=0;	}		//cell_type	 i=0;	   ifstream ifs7("/filelocation/initial_setting_cell1840/celltype_result.dat");	 string reading_line7;	 // read by line	 while (getline(ifs7, reading_line7)) {			 sscanf(reading_line7.data(), "%d", &Cellnum[i].cell_type);		 i++;	 }		//----------//Geometory	//edge_length	imax=Cellnum.size();	for (i=0;i<imax; i++){		jmax=Cellnum[i].GroupEdge.size();		for (j=0; j<jmax; j++) {			Cellnum[i].GroupEdge_h.push_back(Vertex());			Cellnum[i].GroupEdge_h[j].R_edge=sqrt((Vertices[Cellnum[i].GroupVertex[(j+1)%jmax]].coordinate[0]-Vertices[Cellnum[i].GroupVertex[j%jmax]].coordinate[0])													   *(Vertices[Cellnum[i].GroupVertex[(j+1)%jmax]].coordinate[0]-Vertices[Cellnum[i].GroupVertex[j%jmax]].coordinate[0])													   +(Vertices[Cellnum[i].GroupVertex[(j+1)%jmax]].coordinate[1]-Vertices[Cellnum[i].GroupVertex[j%jmax]].coordinate[1])													   *(Vertices[Cellnum[i].GroupVertex[(j+1)%jmax]].coordinate[1]-Vertices[Cellnum[i].GroupVertex[j%jmax]].coordinate[1])													   +(Vertices[Cellnum[i].GroupVertex[(j+1)%jmax]].coordinate[2]-Vertices[Cellnum[i].GroupVertex[j%jmax]].coordinate[2])													   *(Vertices[Cellnum[i].GroupVertex[(j+1)%jmax]].coordinate[2]-Vertices[Cellnum[i].GroupVertex[j%jmax]].coordinate[2]));		}	}		//perimeter	imax=Cellnum.size();	for (i=0;i<imax; i++){		Cellnum[i].Perimeter=0;		jmax=Cellnum[i].GroupEdge_h.size();		for (j=0; j<jmax; j++) {			Cellnum[i].Perimeter+=Cellnum[i].GroupEdge_h[j%jmax].R_edge;		}	}	imax=Cellnum.size();	for (i=0;i<imax; i++){		Cellnum[i].Perimeter0=Cellnum[i].Perimeter*0.5;	}		//edge parameter	imax=Cellnum.size();	for (i=0;i<imax; i++){		jmax=Cellnum[i].GroupEdge.size();		for (j=0; j<jmax; j++) {			Cellnum[i].GroupEdge_h[j].k_api=k_3*0;            Cellnum[i].GroupEdge_h[j].sita_edge=0;		}	}		//tissue neighbor cell center	imax=Cellnum.size();	for (i=0;i<imax; i++){		jmax=Cellnum[i].GroupEdge.size();		for (j=0; j<jmax; j++) {		for (k=0; k<2; k++){		if (Edge[Cellnum[i].GroupEdge[j]].Edge_Area[k]==i) {			Cellnum[i].GroupEdge_h[j%jmax].tissue_nc_center=Edge[Cellnum[i].GroupEdge[j%jmax]].Edge_Area[(k+1)%2];		}		}		}	}	//----------------	//vertex position length	imax=Vertices.size();	for (i=0; i<imax; i++){		Vertices[i].vertex_r=sqrt(Vertices[i].coordinate[0]*Vertices[i].coordinate[0]+Vertices[i].coordinate[1]*Vertices[i].coordinate[1]+Vertices[i].coordinate[2]*Vertices[i].coordinate[2]);		Vertices[i].vertex_r0=tissue_r0;	}	//----------------	//sorting for program code lines is prohibited; Normal vector->rotation angle->2D->center of gravity   //Vector of Relative Position; Beginning vertex of cell set to origin point	imax=Cellnum.size();	for (i=0;i<imax; i++){        jmax=Cellnum[i].GroupVertex.size();        for (j=0; j<jmax; j++){            Cellnum[i].GroupVertex_h.push_back(Vertex());            Cellnum[i].GroupVertex_h[j].r_vector[0]=Vertices[Cellnum[i].GroupVertex[(j)%jmax]].coordinate[0]-Vertices[Cellnum[i].GroupVertex[0]].coordinate[0];            Cellnum[i].GroupVertex_h[j].r_vector[1]=Vertices[Cellnum[i].GroupVertex[(j)%jmax]].coordinate[1]-Vertices[Cellnum[i].GroupVertex[0]].coordinate[1];            Cellnum[i].GroupVertex_h[j].r_vector[2]=Vertices[Cellnum[i].GroupVertex[(j)%jmax]].coordinate[2]-Vertices[Cellnum[i].GroupVertex[0]].coordinate[2];        }    }//--------------------	//Area+vertical vector	double n_length;    for (i=0; i<imax; i++) {        Cellnum[i].Area0=0;        Cellnum[i].Area0_x=0;        Cellnum[i].Area0_y=0;        Cellnum[i].Area0_z=0;    }    for (i=0; i<imax; i++) {        jmax=Cellnum[i].GroupVertex.size();                for (j=0; j<jmax; j++) {                    Cellnum[i].Area0_x+=(Cellnum[i].GroupVertex_h[j%jmax].r_vector[1]*Cellnum[i].GroupVertex_h[(j+1)%jmax].r_vector[2]                                         -Cellnum[i].GroupVertex_h[j%jmax].r_vector[2]*Cellnum[i].GroupVertex_h[(j+1)%jmax].r_vector[1]);                                        Cellnum[i].Area0_y+=(Cellnum[i].GroupVertex_h[j%jmax].r_vector[2]*Cellnum[i].GroupVertex_h[(j+1)%jmax].r_vector[0]                                         -Cellnum[i].GroupVertex_h[j%jmax].r_vector[0]*Cellnum[i].GroupVertex_h[(j+1)%jmax].r_vector[2]);                                        Cellnum[i].Area0_z+=(Cellnum[i].GroupVertex_h[j%jmax].r_vector[0]*Cellnum[i].GroupVertex_h[(j+1)%jmax].r_vector[1]                                         -Cellnum[i].GroupVertex_h[j%jmax].r_vector[1]*Cellnum[i].GroupVertex_h[(j+1)%jmax].r_vector[0]);        }				n_length=sqrt(Cellnum[i].Area0_x*Cellnum[i].Area0_x+Cellnum[i].Area0_y*Cellnum[i].Area0_y+Cellnum[i].Area0_z*Cellnum[i].Area0_z);			Cellnum[i].Area0=0.5*n_length;//ideal cell area		Cellnum[i].Area0_0=Cellnum[i].Area0;//initial area		Cellnum[i].Area0_00=Cellnum[i].Area0;//origin area				Cellnum[i].n_vector[0]=Cellnum[i].Area0_x/n_length;//normal vector of cell x element		Cellnum[i].n_vector[1]=Cellnum[i].Area0_y/n_length;//normal vector of cell y element		Cellnum[i].n_vector[2]=Cellnum[i].Area0_z/n_length;//normal vector of cell z element	}	//-----------------	//3D coordinate -> 2D coordinate	imax=Cellnum.size();	for (i=0; i<imax; i++) {		//sita:angle from z-axis fai:angle from x-axis		Cellnum[i].fai=acos(Cellnum[i].n_vector[2]);		Cellnum[i].sita=acos(Cellnum[i].n_vector[0]/sqrt(Cellnum[i].n_vector[0]*Cellnum[i].n_vector[0]+Cellnum[i].n_vector[1]*Cellnum[i].n_vector[1]));		if(Cellnum[i].n_vector[1]<0){//hosei		Cellnum[i].sita=-acos(Cellnum[i].n_vector[0]/sqrt(Cellnum[i].n_vector[0]*Cellnum[i].n_vector[0]+Cellnum[i].n_vector[1]*Cellnum[i].n_vector[1]));		}	}//--------------------	//Normal vector rotated to z-axis direction	/*imax=Cellnum.size();	for (i=0; i<imax; i++) {		//z-axis angle transformation		Cellnum[i].n_vector_2dz[0]=Cellnum[i].n_vector[0]*cos(Cellnum[i].sita) +Cellnum[i].n_vector[1]*sin(Cellnum[i].sita);		Cellnum[i].n_vector_2dz[1]=-Cellnum[i].n_vector[0]*sin(Cellnum[i].sita) +Cellnum[i].n_vector[1]*cos(Cellnum[i].sita);		Cellnum[i].n_vector_2dz[2]=Cellnum[i].n_vector[2];		//y-axis angle transformation		Cellnum[i].n_vector_2d[0]=Cellnum[i].n_vector_2dz[0]*cos(Cellnum[i].fai) -Cellnum[i].n_vector_2dz[2]*sin(Cellnum[i].fai);		Cellnum[i].n_vector_2d[1]=Cellnum[i].n_vector_2dz[1];		Cellnum[i].n_vector_2d[2]=Cellnum[i].n_vector_2dz[0]*sin(Cellnum[i].fai) +Cellnum[i].n_vector_2dz[2]*cos(Cellnum[i].fai);	}*///-----------------------	//origin point is starting point of coordinate　3D->2D	imax=Cellnum.size();	for (i=0; i<imax; i++) {		jmax=Cellnum[i].GroupVertex_h.size();        for (j=0; j<jmax; j++){		//z-axis angle transformation		Cellnum[i].GroupVertex_h[j].r_vector_2dz[0]=Cellnum[i].GroupVertex_h[j].r_vector[0]*cos(Cellnum[i].sita) +Cellnum[i].GroupVertex_h[j].r_vector[1]*sin(Cellnum[i].sita);		Cellnum[i].GroupVertex_h[j].r_vector_2dz[1]=-Cellnum[i].GroupVertex_h[j].r_vector[0]*sin(Cellnum[i].sita) +Cellnum[i].GroupVertex_h[j].r_vector[1]*cos(Cellnum[i].sita);		Cellnum[i].GroupVertex_h[j].r_vector_2dz[2]=Cellnum[i].GroupVertex_h[j].r_vector[2];		//y-axis angle transformation		Cellnum[i].GroupVertex_h[j].r_vector_2d[0]=Cellnum[i].GroupVertex_h[j].r_vector_2dz[0]*cos(Cellnum[i].fai) -Cellnum[i].GroupVertex_h[j].r_vector_2dz[2]*sin(Cellnum[i].fai);		Cellnum[i].GroupVertex_h[j].r_vector_2d[1]=Cellnum[i].GroupVertex_h[j].r_vector_2dz[1];		Cellnum[i].GroupVertex_h[j].r_vector_2d[2]=Cellnum[i].GroupVertex_h[j].r_vector_2dz[0]*sin(Cellnum[i].fai) +Cellnum[i].GroupVertex_h[j].r_vector_2dz[2]*cos(Cellnum[i].fai);	}	}//-----------------------	//calculate the center of gravity of cell	double gaiseki;	imax=Cellnum.size();	for (i=0; i<imax; i++) {	Cellnum[i].centroid_2d[0]=0;	Cellnum[i].centroid_2d[1]=0;	Cellnum[i].centroid_2d[2]=0;	}	//calculate the center of gravity of cell in 2D,　Relative position to the origin point	imax=Cellnum.size();	for (i=0; i<imax; i++) {	jmax=Cellnum[i].GroupVertex_h.size();	for (j=0; j<jmax; j++) {		gaiseki=(Cellnum[i].GroupVertex_h[(j)%jmax].r_vector_2d[0]*Cellnum[i].GroupVertex_h[(j+1)%jmax].r_vector_2d[1]						 -Cellnum[i].GroupVertex_h[(j)%jmax].r_vector_2d[1]*Cellnum[i].GroupVertex_h[(j+1)%jmax].r_vector_2d[0]);		Cellnum[i].centroid_2d[0]+=((Cellnum[i].GroupVertex_h[(j)%jmax].r_vector_2d[0])+(Cellnum[i].GroupVertex_h[(j+1)%jmax].r_vector_2d[0]))*gaiseki;		Cellnum[i].centroid_2d[1]+=((Cellnum[i].GroupVertex_h[(j)%jmax].r_vector_2d[1])+(Cellnum[i].GroupVertex_h[(j+1)%jmax].r_vector_2d[1]))*gaiseki;		}		Cellnum[i].centroid_2d[0]=Cellnum[i].centroid_2d[0]/(6.0*Cellnum[i].Area0);		Cellnum[i].centroid_2d[1]=Cellnum[i].centroid_2d[1]/(6.0*Cellnum[i].Area0);		Cellnum[i].centroid_2d[2]=0;	//recalculate the center of gravity of cell for 3D,　2D -> 3D + position shift	//2D->3D		//y-axis angle transformation			Cellnum[i].centroid_2dy[0]=Cellnum[i].centroid_2d[0]*cos(Cellnum[i].fai) +Cellnum[i].centroid_2d[2]*sin(Cellnum[i].fai);			Cellnum[i].centroid_2dy[1]=Cellnum[i].centroid_2d[1];			Cellnum[i].centroid_2dy[2]=-Cellnum[i].centroid_2d[0]*sin(Cellnum[i].fai) +Cellnum[i].centroid_2d[2]*cos(Cellnum[i].fai);		//z-axis angle transformation			Cellnum[i].centroid[0]=Cellnum[i].centroid_2dy[0]*cos(Cellnum[i].sita) -Cellnum[i].centroid_2dy[1]*sin(Cellnum[i].sita);			Cellnum[i].centroid[1]=Cellnum[i].centroid_2dy[0]*sin(Cellnum[i].sita) +Cellnum[i].centroid_2dy[1]*cos(Cellnum[i].sita);			Cellnum[i].centroid[2]=Cellnum[i].centroid_2dy[2];				//position shift for the center of gravity of cell in 3D, origin point is starting point of coordinate			Cellnum[i].centroid[0]=Cellnum[i].centroid[0]+Vertices[Cellnum[i].GroupVertex[0]].coordinate[0];			Cellnum[i].centroid[1]=Cellnum[i].centroid[1]+Vertices[Cellnum[i].GroupVertex[0]].coordinate[1];			Cellnum[i].centroid[2]=Cellnum[i].centroid[2]+Vertices[Cellnum[i].GroupVertex[0]].coordinate[2];	}//--------------	//Center of gravity is the starting point,　coordinate shift	imax=Cellnum.size();	for (i=0;i<imax; i++){        //hosei		jmax=Cellnum[i].GroupVertex.size();		for (j=0; j<jmax; j++) {			Cellnum[i].GroupVertex_h[j].coordinate_h[0]=Vertices[Cellnum[i].GroupVertex[j%jmax]].coordinate[0]-Cellnum[i].centroid[0];			Cellnum[i].GroupVertex_h[j].coordinate_h[1]=Vertices[Cellnum[i].GroupVertex[j%jmax]].coordinate[1]-Cellnum[i].centroid[1];			Cellnum[i].GroupVertex_h[j].coordinate_h[2]=Vertices[Cellnum[i].GroupVertex[j%jmax]].coordinate[2]-Cellnum[i].centroid[2];		}	}	//Center of gravity is the starting point, 3D->2D	imax=Cellnum.size();	for (i=0; i<imax; i++) {		jmax=Cellnum[i].GroupVertex_h.size();        for (j=0; j<jmax; j++){		//z-axis angle transformation		Cellnum[i].GroupVertex_h[j].xy_coordinate_z[0]=Cellnum[i].GroupVertex_h[j].coordinate_h[0]*cos(Cellnum[i].sita) +Cellnum[i].GroupVertex_h[j].coordinate_h[1]*sin(Cellnum[i].sita);		Cellnum[i].GroupVertex_h[j].xy_coordinate_z[1]=-Cellnum[i].GroupVertex_h[j].coordinate_h[0]*sin(Cellnum[i].sita) +Cellnum[i].GroupVertex_h[j].coordinate_h[1]*cos(Cellnum[i].sita);		Cellnum[i].GroupVertex_h[j].xy_coordinate_z[2]=Cellnum[i].GroupVertex_h[j].coordinate_h[2];				//y-axis angle transformation		Cellnum[i].GroupVertex_h[j].xy_coordinate[0]=Cellnum[i].GroupVertex_h[j].xy_coordinate_z[0]*cos(Cellnum[i].fai) -Cellnum[i].GroupVertex_h[j].xy_coordinate_z[2]*sin(Cellnum[i].fai);		Cellnum[i].GroupVertex_h[j].xy_coordinate[1]=Cellnum[i].GroupVertex_h[j].xy_coordinate_z[1];		Cellnum[i].GroupVertex_h[j].xy_coordinate[2]=Cellnum[i].GroupVertex_h[j].xy_coordinate_z[0]*sin(Cellnum[i].fai) +Cellnum[i].GroupVertex_h[j].xy_coordinate_z[2]*cos(Cellnum[i].fai);	}	}//---------------	//Cell shaped tensor in 2D	for (i=0; i<imax; i++) {		jmax=Cellnum[i].GroupEdge_h.size();		for (j=0; j<jmax; j++) {			Cellnum[i].GroupEdge_h[j].af=Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[0]*Cellnum[i].GroupVertex_h[(j+1)%jmax].xy_coordinate[1]			-(Cellnum[i].GroupVertex_h[(j+1)%jmax].xy_coordinate[0]*Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[1]);		}	}		for (i=0; i<imax; i++) {		Cellnum[i].Mxx=0;		Cellnum[i].Myy=0;		Cellnum[i].Mxy=0;	}	for (i=0; i<imax; i++) {		jmax=Cellnum[i].GroupEdge_h.size();		for (j=0; j<jmax; j++) {			Cellnum[i].Mxx+=2*Cellnum[i].GroupEdge_h[j%jmax].af*(Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[1]*Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[1]																 +Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[1]*Cellnum[i].GroupVertex_h[(j+1)%jmax].xy_coordinate[1]																 +Cellnum[i].GroupVertex_h[(j+1)%jmax].xy_coordinate[1]*Cellnum[i].GroupVertex_h[(j+1)%jmax].xy_coordinate[1])*tf;			Cellnum[i].Myy+=2*Cellnum[i].GroupEdge_h[j%jmax].af*(Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[0]*Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[0]																 +Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[0]*Cellnum[i].GroupVertex_h[(j+1)%jmax].xy_coordinate[0]																 +Cellnum[i].GroupVertex_h[(j+1)%jmax].xy_coordinate[0]*Cellnum[i].GroupVertex_h[(j+1)%jmax].xy_coordinate[0])*tf;			Cellnum[i].Mxy+=Cellnum[i].GroupEdge_h[j%jmax].af*(Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[0]*Cellnum[i].GroupVertex_h[(j+1)%jmax].xy_coordinate[1]															   +2*Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[0]*Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[1]															   +2*Cellnum[i].GroupVertex_h[(j+1)%jmax].xy_coordinate[0]*Cellnum[i].GroupVertex_h[(j+1)%jmax].xy_coordinate[1]															   +Cellnum[i].GroupVertex_h[(j+1)%jmax].xy_coordinate[0]*Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[1])*tf;		}	}	//----------- geometry close	//celltype or parameter change	//cell type	double outcell;	outcell=0;		//haibangai	imax=Cellnum.size();	for (i=0; i<imax; i++) {		if (Cellnum[i].cell_type==6) {			Cellnum[i].cell_type=2;		}	}    	//tail	imax=Cellnum.size();		for (i=0; i<imax; i++) {			if ((Cellnum[i].cell_type==1 || Cellnum[i].cell_type==3) && (Cellnum[i].centroid[1]>= -130*sqrt(1-(Cellnum[i].centroid[2]*Cellnum[i].centroid[2])/(130*130))) && (Cellnum[i].centroid[1]<= 130*sqrt(1-(Cellnum[i].centroid[2]*Cellnum[i].centroid[2])/(130*130))) ) {				Cellnum[i].cell_type=5;//tail			}		}    	//head	imax=Cellnum.size();	for (i=0; i<imax; i++) {		if ((Cellnum[i].cell_type==1 || Cellnum[i].cell_type==3)&& Cellnum[i].centroid[0]>=-130){			Cellnum[i].cell_type=3;//head		}		}	    //extraembryo    imax=Cellnum.size();    for (i=0; i<imax; i++) {        if ((Cellnum[i].cell_type==1 || Cellnum[i].cell_type==3)            && Cellnum[i].centroid[1]>= 0.004*Cellnum[i].centroid[2]*Cellnum[i].centroid[2] +100){            Cellnum[i].cell_type=6;//extraembryo            outcell+=1;        }    }	    cout<< outcell <<endl;    outcell=0;    		//yolk		imax=Cellnum.size();		for (i=0; i<imax; i++) {			if(Cellnum[i].cell_type==4){ //yolk				Cellnum[i].cell_type=2;			}			}        	//cell lineage	imax=Cellnum.size();	for (i=0; i<imax; i++) {			Cellnum[i].cell_lineage=0;		}		imax=Cellnum.size();	for (i=0; i<imax; i++) {		if ((Cellnum[i].cell_type==1||Cellnum[i].cell_type==5) /*&& Cellnum[i].centroid[1]>=150*/ && Cellnum[i].centroid[0]>=-260 && Cellnum[i].centroid[0]<=-230 && Cellnum[i].centroid[1]>=80 && Cellnum[i].centroid[2]>=0) { //202			Cellnum[i].cell_lineage=1;//tail side		}	}		imax=Cellnum.size();	for (i=0; i<imax; i++) {		if ((Cellnum[i].cell_type==1||Cellnum[i].cell_type==5) && Cellnum[i].centroid[0]>=-220 && Cellnum[i].centroid[0]<=-170 && Cellnum[i].centroid[2]>=-40 && Cellnum[i].centroid[2]<=40 && Cellnum[i].centroid[1]<=50) {			Cellnum[i].cell_lineage=2;//middle side		}	}   /* for (i=0; i<imax; i++) {        if ((Cellnum[i].cell_type==1||Cellnum[i].cell_type==5) && Cellnum[i].centroid[0]>=-220 && Cellnum[i].centroid[0]<=-170 && Cellnum[i].centroid[1]>=-40 && Cellnum[i].centroid[1]<=40) {            Cellnum[i].cell_lineage=2;//middle        }    }*/		imax=Cellnum.size();	for (i=0; i<imax; i++) {		if (Cellnum[i].cell_type==3  && Cellnum[i].centroid[0]>=-220 && Cellnum[i].centroid[0]<=-90 && Cellnum[i].centroid[1]<=80 && Cellnum[i].centroid[1]>=0 && Cellnum[i].centroid[2]>=0) {			Cellnum[i].cell_lineage=3;//head side		}	}		//cell_type parameter	imax=Cellnum.size();	for (i=0; i<imax; i++) {		if(Cellnum[i].cell_type==1){ //middle			Cellnum[i].k_area=k_1*1.0;//5			Cellnum[i].k_peri=k_2*1.0;//4			Cellnum[i].k_tiss=k_5*1.0;//			Cellnum[i].cell_rand=rand_normal(1,0.75);			outcell+=1;		}	}		imax=Cellnum.size();	for (i=0; i<imax; i++) {	if( Cellnum[i].cell_type==3){ //tail			Cellnum[i].k_area=k_1*1.0;//7.0			Cellnum[i].k_peri=k_1*1.0;//4.5			Cellnum[i].k_tiss=k_5*1.0;//			Cellnum[i].cell_rand=rand_normal(1,0.75);			outcell+=1;		}	}		imax=Cellnum.size();	for (i=0; i<imax; i++) {		if (Cellnum[i].cell_type==5){ //head			Cellnum[i].k_area=k_1*1;//7			Cellnum[i].k_peri=k_2*1;//3			Cellnum[i].k_tiss=k_5*1.0;//			Cellnum[i].cell_rand=rand_normal(1,0.75);			outcell+=1;		}	}		cout<< outcell <<endl;		imax=Cellnum.size();	for (i=0; i<imax; i++) {		if (Cellnum[i].cell_type==6){ //extra			Cellnum[i].k_area=k_1*0.1;//0.1			Cellnum[i].k_peri=k_2*0.3;//0.3			Cellnum[i].k_tiss=k_5*0.0;//		}	}			imax=Cellnum.size();	for (i=0; i<imax; i++) {		if(Cellnum[i].cell_type==2){ //yolk			Cellnum[i].k_area=k_1*0;//10			Cellnum[i].k_peri=k_2*0;			Cellnum[i].k_tiss=k_5*0;//		}	}		//edge parameter	imax=Cellnum.size();	for (i=0;i<imax; i++){		if (Cellnum[i].cell_type==1 ||Cellnum[i].cell_type==3 ||Cellnum[i].cell_type==5)		jmax=Cellnum[i].GroupEdge.size();		for (j=0; j<jmax; j++) {			Cellnum[i].GroupEdge_h[j].k_api=k_3*1;		}	}		imax=Cellnum.size();	for (i=0;i<imax; i++){		if (Cellnum[i].cell_type==1 || Cellnum[i].cell_type==3 ||Cellnum[i].cell_type==5 ||Cellnum[i].cell_type==6){		jmax=Cellnum[i].GroupVertex.size();		for (j=0; j<jmax; j++) {			Vertices[Cellnum[i].GroupVertex[j]].k_ball=k_4*1;		}	}	}		//cell polarity initial setting	imax=Cellnum.size();	imax=Cellnum.size();	for (i=0; i<imax; i++) {		Cellnum[i].tiss_cent_dr[0]=0;		Cellnum[i].tiss_cent_dr[1]=0;		Cellnum[i].tiss_cent_dr[2]=0;		Cellnum[i].tiss_growth[0]=0;		Cellnum[i].tiss_growth[1]=0;		Cellnum[i].tiss_growth[2]=0;	}    /*for (i=0;i<imax; i++){		if (Cellnum[i].cell_type==1){			Cellnum[i].tiss_cent_dr[0]=0;			if (Cellnum[i].centroid[2]>=0){				Cellnum[i].tiss_cent_dr[1]=-3*Cellnum[i].centroid[2]/sqrt(Cellnum[i].centroid[1]*Cellnum[i].centroid[1]+Cellnum[i].centroid[2]*Cellnum[i].centroid[2]);				Cellnum[i].tiss_cent_dr[2]=3*Cellnum[i].centroid[1]/sqrt(Cellnum[i].centroid[1]*Cellnum[i].centroid[1]+Cellnum[i].centroid[2]*Cellnum[i].centroid[2]);			}			if (Cellnum[i].centroid[2]<0){				Cellnum[i].tiss_cent_dr[1]=3*Cellnum[i].centroid[2]/sqrt(Cellnum[i].centroid[1]*Cellnum[i].centroid[1]+Cellnum[i].centroid[2]*Cellnum[i].centroid[2]);				Cellnum[i].tiss_cent_dr[2]=-3*Cellnum[i].centroid[1]/sqrt(Cellnum[i].centroid[1]*Cellnum[i].centroid[1]+Cellnum[i].centroid[2]*Cellnum[i].centroid[2]);			}		}		if (Cellnum[i].cell_type==3){			Cellnum[i].tiss_cent_dr[0]=2;			if (Cellnum[i].centroid[2]>=0){				Cellnum[i].tiss_cent_dr[1]=-2*Cellnum[i].centroid[2]/sqrt(Cellnum[i].centroid[1]*Cellnum[i].centroid[1]+Cellnum[i].centroid[2]*Cellnum[i].centroid[2]);				Cellnum[i].tiss_cent_dr[2]=2*Cellnum[i].centroid[1]/sqrt(Cellnum[i].centroid[1]*Cellnum[i].centroid[1]+Cellnum[i].centroid[2]*Cellnum[i].centroid[2]);			}			if (Cellnum[i].centroid[2]<0){				Cellnum[i].tiss_cent_dr[1]=2*Cellnum[i].centroid[2]/sqrt(Cellnum[i].centroid[1]*Cellnum[i].centroid[1]+Cellnum[i].centroid[2]*Cellnum[i].centroid[2]);				Cellnum[i].tiss_cent_dr[2]=-2*Cellnum[i].centroid[1]/sqrt(Cellnum[i].centroid[1]*Cellnum[i].centroid[1]+Cellnum[i].centroid[2]*Cellnum[i].centroid[2]);			}		}		if (Cellnum[i].cell_type==5){			Cellnum[i].tiss_cent_dr[0]=0;			if (Cellnum[i].centroid[2]>=0){				Cellnum[i].tiss_cent_dr[1]=-2*Cellnum[i].centroid[2]/sqrt(Cellnum[i].centroid[1]*Cellnum[i].centroid[1]+Cellnum[i].centroid[2]*Cellnum[i].centroid[2]);				Cellnum[i].tiss_cent_dr[2]=2*Cellnum[i].centroid[1]/sqrt(Cellnum[i].centroid[1]*Cellnum[i].centroid[1]+Cellnum[i].centroid[2]*Cellnum[i].centroid[2]);			}			if (Cellnum[i].centroid[2]<0){				Cellnum[i].tiss_cent_dr[1]=2*Cellnum[i].centroid[2]/sqrt(Cellnum[i].centroid[1]*Cellnum[i].centroid[1]+Cellnum[i].centroid[2]*Cellnum[i].centroid[2]);				Cellnum[i].tiss_cent_dr[2]=-2*Cellnum[i].centroid[1]/sqrt(Cellnum[i].centroid[1]*Cellnum[i].centroid[1]+Cellnum[i].centroid[2]*Cellnum[i].centroid[2]);			}		} //celltype	} //i*/		//inducing gene expression pattern from in vivo	int i_ge;	double x_ge, y_ge, z_ge;	double h_ge, p_ge, d_ge, m_ge, c_ge, s_ge, g_ge;		i=0;	  ifstream ifs8("/filelocation/initial_setting_cell1840/disk_gene_hpdmcsg_silico.dat");		string reading_line8;		// read by line		while (getline(ifs8, reading_line8)) {			sscanf(reading_line8.data(), "%d	%lf	%lf	%lf	%lf	%lf	%lf	%lf	%lf	%lf	%lf", &i_ge, &x_ge, &y_ge, &z_ge, &h_ge, &p_ge, &d_ge, &m_ge, &c_ge, &s_ge, &g_ge);			/*Cellnum[i_ge].diff[0]=h_ge;			Cellnum[i_ge].diff[1]=p_ge;			Cellnum[i_ge].diff[2]=s_ge;			Cellnum[i_ge].diff[3]=d_ge;*/						Cellnum[i_ge].diff[0]=h_ge/255.15;			Cellnum[i_ge].diff[1]=p_ge/723;			Cellnum[i_ge].diff[2]=s_ge/1970;			Cellnum[i_ge].diff[3]=d_ge/1533.55;			i++;		}			//diffusion_para	imax=Cellnum.size();	for (i=0; i<imax; i++) {		if(Cellnum[i].cell_type==1 || Cellnum[i].cell_type==3 || Cellnum[i].cell_type==5){		Cellnum[i].D_0=d_0;        Cellnum[i].D_1=d_1;        Cellnum[i].D_2=d_2;        Cellnum[i].D_3=d_3;		Cellnum[i].S_0=s_0;        Cellnum[i].S_1=s_1;		Cellnum[i].S_2=s_2;        Cellnum[i].S_3=s_3;		Cellnum[i].P_0=p_0;		Cellnum[i].P_1=p_1;		Cellnum[i].P_2=p_2;        Cellnum[i].P_3=p_3;		Cellnum[i].B_0=b_0;        Cellnum[i].B_1=b_1;        Cellnum[i].B_2=b_2;        Cellnum[i].B_3=b_3;		}	}		//theoritical setting gene expression	/*imax=Cellnum.size();	for (i=0; i<imax; i++) {	if(Cellnum[i].cell_type==1 || Cellnum[i].cell_type==3 || Cellnum[i].cell_type==5){		Cellnum[i].diff[0]=0;		Cellnum[i].diff[1]=0;		Cellnum[i].diff[2]=0;		Cellnum[i].diff[3]=0;		}	}*/		/*imax=Cellnum.size();	for (i=0; i<imax; i++) {		if(Cellnum[i].cell_type==3){			Cellnum[i].diff[0]=hh*1;		}	}		imax=Cellnum.size();	for (i=0; i<imax; i++) {		if(Cellnum[i].cell_type==5 ){			Cellnum[i].diff[0]=0;			Cellnum[i].diff[0]=hh*0.5;		}	}*/		//growth rate based cellsize	double area_ave;	double perimeter_ave;	double cell_num;	area_ave=0;	perimeter_ave=0;	cell_num=0;	imax=Cellnum.size();	for (i=0; i<imax; i++) {		if(Cellnum[i].cell_type==1 || Cellnum[i].cell_type==3|| Cellnum[i].cell_type==5|| Cellnum[i].cell_type==6){			area_ave+=Cellnum[i].Area0;			perimeter_ave+=Cellnum[i].Perimeter0;			cell_num++;		}	}	Area_ave1=area_ave/cell_num;	Perimeter_ave1=perimeter_ave/cell_num;	cout<<"Area_ave"<<Area_ave1<<"Perimeter_ave"<<2*Perimeter_ave1 <<endl;		//north pole	i_north=0;	imax=Cellnum.size();	for (i=0; i<imax; i++) {		if(Cellnum[i].cell_type==5){			if (Cellnum[i].centroid[0]<Cellnum[i_north].centroid[0]){					i_north=i;			}		}	}	cout<<"northpole"<<i_north <<"x"<<Cellnum[i_north].centroid[0] <<"y"<<Cellnum[i_north].centroid[1]<<"z"<<Cellnum[i_north].centroid[2]<<endl;	//division//division time	imax=Cellnum.size();	for (i=0; i<imax; i++) {		Cellnum[i].time_division=-1;	}		imax=Cellnum.size();	  for (i=0; i<imax; i++) {		  if (Cellnum[i].cell_type==1 || Cellnum[i].cell_type==3 || Cellnum[i].cell_type==5){			Cellnum[i].time_division=100+int(qmax*0.7*drand48());			  //Cellnum[i].time_division=int(10000*rand_normal(1,0.1));		  }		}		//division count	for (i=0; i<imax; i++) {		Cellnum[i].division_count=0;	}	//axis_division	imax=Cellnum.size();	for (i=0; i<imax; i++) {		Cellnum[i].axis_division=0;	}	//T1	imax=Edge.size();	for (i=0; i<imax; i++) {		Edge[i].T1_flag=0;	}	T1_count=0;	//T2	imax=Vertices.size();	for (i=0; i<imax; i++) {		Vertices[i].vertex_type=0;	}	T2_count=0;		flag_ogi=-1;//stage	cout << "a2a" << endl;}//firstset_cell				   void Tissue::Geometory_cell() {//Geometory	//edge_length	imax=Cellnum.size();	for (i=0;i<imax; i++){		jmax=Cellnum[i].GroupEdge_h.size();		for (j=0; j<jmax; j++) {			Cellnum[i].GroupEdge_h[j].R_edge=sqrt((Vertices[Cellnum[i].GroupVertex[(j+1)%jmax]].coordinate[0]-Vertices[Cellnum[i].GroupVertex[j%jmax]].coordinate[0])														*(Vertices[Cellnum[i].GroupVertex[(j+1)%jmax]].coordinate[0]-Vertices[Cellnum[i].GroupVertex[j%jmax]].coordinate[0])														+(Vertices[Cellnum[i].GroupVertex[(j+1)%jmax]].coordinate[1]-Vertices[Cellnum[i].GroupVertex[j%jmax]].coordinate[1])														*(Vertices[Cellnum[i].GroupVertex[(j+1)%jmax]].coordinate[1]-Vertices[Cellnum[i].GroupVertex[j%jmax]].coordinate[1])														+(Vertices[Cellnum[i].GroupVertex[(j+1)%jmax]].coordinate[2]-Vertices[Cellnum[i].GroupVertex[j%jmax]].coordinate[2])														*(Vertices[Cellnum[i].GroupVertex[(j+1)%jmax]].coordinate[2]-Vertices[Cellnum[i].GroupVertex[j%jmax]].coordinate[2]));			}		}		//perimeter	imax=Cellnum.size();	for (i=0;i<imax; i++){		Cellnum[i].Perimeter=0;		jmax=Cellnum[i].GroupEdge_h.size();		for (j=0; j<jmax; j++) {			Cellnum[i].Perimeter+=Cellnum[i].GroupEdge_h[j%jmax].R_edge;		}	}	//tissue neighbor cell center	imax=Cellnum.size();	for (i=0;i<imax; i++){		jmax=Cellnum[i].GroupEdge.size();		for (j=0; j<jmax; j++) {		for (k=0; k<2; k++){		if (Edge[Cellnum[i].GroupEdge[j]].Edge_Area[k]==i) {			Cellnum[i].GroupEdge_h[j%jmax].tissue_nc_center=Edge[Cellnum[i].GroupEdge[j%jmax]].Edge_Area[(k+1)%2];		}		}		}	}	//----------------	//vertex position length	imax=Vertices.size();	for (i=0; i<imax; i++){		Vertices[i].vertex_r=sqrt(Vertices[i].coordinate[0]*Vertices[i].coordinate[0]+Vertices[i].coordinate[1]*Vertices[i].coordinate[1]+Vertices[i].coordinate[2]*Vertices[i].coordinate[2]);	}		//embryo center point	/*tissue_center[0]=0;	tissue_center[1]=0;	tissue_center[2]=0;	imax=Vertices.size();	for (i=0; i<imax; i++){		tissue_center[0]+=Vertices[i].coordinate[0];		tissue_center[1]+=Vertices[i].coordinate[1];		tissue_center[2]+=Vertices[i].coordinate[2];	}	tissue_center[0]=tissue_center[0]/imax;	tissue_center[1]=tissue_center[1]/imax;	tissue_center[2]=tissue_center[2]/imax;*/	//----------------//sorting for program code lines is prohibited; Normal vector->rotation angle->2D->center of gravity of cell	//Vector of Relative Position; set the beginning vertex of the cell as the origin point	imax=Cellnum.size();	for (i=0;i<imax; i++){		jmax=Cellnum[i].GroupVertex.size();		for (j=0; j<jmax; j++){				Cellnum[i].GroupVertex_h[j].r_vector[0]=Vertices[Cellnum[i].GroupVertex[(j)%jmax]].coordinate[0]-Vertices[Cellnum[i].GroupVertex[0]].coordinate[0];				Cellnum[i].GroupVertex_h[j].r_vector[1]=Vertices[Cellnum[i].GroupVertex[(j)%jmax]].coordinate[1]-Vertices[Cellnum[i].GroupVertex[0]].coordinate[1];				Cellnum[i].GroupVertex_h[j].r_vector[2]=Vertices[Cellnum[i].GroupVertex[(j)%jmax]].coordinate[2]-Vertices[Cellnum[i].GroupVertex[0]].coordinate[2];			}		}//--------------------	//Area+vertical vector	double n_length;	for (i=0; i<imax; i++) {		Cellnum[i].Area_x=0;		Cellnum[i].Area_y=0;		Cellnum[i].Area_z=0;		}	for (i=0; i<imax; i++) {		jmax=Cellnum[i].GroupVertex.size();				for (j=0; j<jmax; j++) {					Cellnum[i].Area_x+=(Cellnum[i].GroupVertex_h[j%jmax].r_vector[1]*Cellnum[i].GroupVertex_h[(j+1)%jmax].r_vector[2]											-Cellnum[i].GroupVertex_h[j%jmax].r_vector[2]*Cellnum[i].GroupVertex_h[(j+1)%jmax].r_vector[1]);					Cellnum[i].Area_y+=(Cellnum[i].GroupVertex_h[j%jmax].r_vector[2]*Cellnum[i].GroupVertex_h[(j+1)%jmax].r_vector[0]											 -Cellnum[i].GroupVertex_h[j%jmax].r_vector[0]*Cellnum[i].GroupVertex_h[(j+1)%jmax].r_vector[2]);					Cellnum[i].Area_z+=(Cellnum[i].GroupVertex_h[j%jmax].r_vector[0]*Cellnum[i].GroupVertex_h[(j+1)%jmax].r_vector[1]											 -Cellnum[i].GroupVertex_h[j%jmax].r_vector[1]*Cellnum[i].GroupVertex_h[(j+1)%jmax].r_vector[0]);			}					n_length=sqrt(Cellnum[i].Area_x*Cellnum[i].Area_x+Cellnum[i].Area_y*Cellnum[i].Area_y+Cellnum[i].Area_z*Cellnum[i].Area_z);//vector length				Cellnum[i].Area=0.5*n_length;//Cell area		Cellnum[i].n_vector[0]=Cellnum[i].Area_x/n_length;//normal vector of x coordinate		Cellnum[i].n_vector[1]=Cellnum[i].Area_y/n_length;//normal vector of y		Cellnum[i].n_vector[2]=Cellnum[i].Area_z/n_length;//normal vector of z        		}//-----------------	//3D coordinate -> 2D coordinate	imax=Cellnum.size();	for (i=0; i<imax; i++) {	//sita:angle from z-axis fai:angle from x-axis		Cellnum[i].fai=acos(Cellnum[i].n_vector[2]);		Cellnum[i].sita=acos(Cellnum[i].n_vector[0]/sqrt(Cellnum[i].n_vector[0]*Cellnum[i].n_vector[0]+Cellnum[i].n_vector[1]*Cellnum[i].n_vector[1]));	if(Cellnum[i].n_vector[1]<0){//hosei		Cellnum[i].sita=-acos(Cellnum[i].n_vector[0]/sqrt(Cellnum[i].n_vector[0]*Cellnum[i].n_vector[0]+Cellnum[i].n_vector[1]*Cellnum[i].n_vector[1]));			}	}//--------------------	//Normal vector rotated to z-axis direction, 3D->2D method		/*imax=Cellnum.size();		for (i=0; i<imax; i++) {			//z-axis angle transformation			Cellnum[i].n_vector_2dz[0]=Cellnum[i].n_vector[0]*cos(Cellnum[i].sita) +Cellnum[i].n_vector[1]*sin(Cellnum[i].sita);			Cellnum[i].n_vector_2dz[1]=-Cellnum[i].n_vector[0]*sin(Cellnum[i].sita) +Cellnum[i].n_vector[1]*cos(Cellnum[i].sita);			Cellnum[i].n_vector_2dz[2]=Cellnum[i].n_vector[2];			//y-axis angle transformation			Cellnum[i].n_vector_2d[0]=Cellnum[i].n_vector_2dz[0]*cos(Cellnum[i].fai) -Cellnum[i].n_vector_2dz[2]*sin(Cellnum[i].fai);			Cellnum[i].n_vector_2d[1]=Cellnum[i].n_vector_2dz[1];			Cellnum[i].n_vector_2d[2]=Cellnum[i].n_vector_2dz[0]*sin(Cellnum[i].fai) +Cellnum[i].n_vector_2dz[2]*cos(Cellnum[i].fai);		}*///-----------------------	//origin point is starting point of coordinate　3D->2D	imax=Cellnum.size();	for (i=0; i<imax; i++) {		jmax=Cellnum[i].GroupVertex_h.size();		for (j=0; j<jmax; j++){			//z-axis angle transformation			Cellnum[i].GroupVertex_h[j].r_vector_2dz[0]=Cellnum[i].GroupVertex_h[j].r_vector[0]*cos(Cellnum[i].sita) +Cellnum[i].GroupVertex_h[j].r_vector[1]*sin(Cellnum[i].sita);			Cellnum[i].GroupVertex_h[j].r_vector_2dz[1]=-Cellnum[i].GroupVertex_h[j].r_vector[0]*sin(Cellnum[i].sita) +Cellnum[i].GroupVertex_h[j].r_vector[1]*cos(Cellnum[i].sita);			Cellnum[i].GroupVertex_h[j].r_vector_2dz[2]=Cellnum[i].GroupVertex_h[j].r_vector[2];			//y-axis angle transformation			Cellnum[i].GroupVertex_h[j].r_vector_2d[0]=Cellnum[i].GroupVertex_h[j].r_vector_2dz[0]*cos(Cellnum[i].fai) -Cellnum[i].GroupVertex_h[j].r_vector_2dz[2]*sin(Cellnum[i].fai);			Cellnum[i].GroupVertex_h[j].r_vector_2d[1]=Cellnum[i].GroupVertex_h[j].r_vector_2dz[1];			Cellnum[i].GroupVertex_h[j].r_vector_2d[2]=Cellnum[i].GroupVertex_h[j].r_vector_2dz[0]*sin(Cellnum[i].fai) +Cellnum[i].GroupVertex_h[j].r_vector_2dz[2]*cos(Cellnum[i].fai);		}	}//-----------------------	//calculate the center of gravity of cell	double gaiseki;	imax=Cellnum.size();	for (i=0; i<imax; i++) {		Cellnum[i].centroid_2d[0]=0;		Cellnum[i].centroid_2d[1]=0;		Cellnum[i].centroid_2d[2]=0;	}	//calculate the center of gravity of cell in 2D,　Relative position to the origin point	imax=Cellnum.size();	for (i=0; i<imax; i++) {		jmax=Cellnum[i].GroupVertex_h.size();		for (j=0; j<jmax; j++) {			gaiseki=(Cellnum[i].GroupVertex_h[(j)%jmax].r_vector_2d[0]*Cellnum[i].GroupVertex_h[(j+1)%jmax].r_vector_2d[1]							 -Cellnum[i].GroupVertex_h[(j)%jmax].r_vector_2d[1]*Cellnum[i].GroupVertex_h[(j+1)%jmax].r_vector_2d[0]);			Cellnum[i].centroid_2d[0]+=((Cellnum[i].GroupVertex_h[(j)%jmax].r_vector_2d[0])+(Cellnum[i].GroupVertex_h[(j+1)%jmax].r_vector_2d[0]))*gaiseki;			Cellnum[i].centroid_2d[1]+=((Cellnum[i].GroupVertex_h[(j)%jmax].r_vector_2d[1])+(Cellnum[i].GroupVertex_h[(j+1)%jmax].r_vector_2d[1]))*gaiseki;			}			Cellnum[i].centroid_2d[0]=Cellnum[i].centroid_2d[0]/(6.0*Cellnum[i].Area);			Cellnum[i].centroid_2d[1]=Cellnum[i].centroid_2d[1]/(6.0*Cellnum[i].Area);			Cellnum[i].centroid_2d[2]=0;		//calculate the center of gravity of cell for 3D,　2D -> 3D + position shift		//2D->3D		//y-axis angle transformation			Cellnum[i].centroid_2dy[0]=Cellnum[i].centroid_2d[0]*cos(Cellnum[i].fai) +Cellnum[i].centroid_2d[2]*sin(Cellnum[i].fai);			Cellnum[i].centroid_2dy[1]=Cellnum[i].centroid_2d[1];			Cellnum[i].centroid_2dy[2]=-Cellnum[i].centroid_2d[0]*sin(Cellnum[i].fai) +Cellnum[i].centroid_2d[2]*cos(Cellnum[i].fai);		//z-axis angle transformation			Cellnum[i].centroid[0]=Cellnum[i].centroid_2dy[0]*cos(Cellnum[i].sita) -Cellnum[i].centroid_2dy[1]*sin(Cellnum[i].sita);			Cellnum[i].centroid[1]=Cellnum[i].centroid_2dy[0]*sin(Cellnum[i].sita) +Cellnum[i].centroid_2dy[1]*cos(Cellnum[i].sita);			Cellnum[i].centroid[2]=Cellnum[i].centroid_2dy[2];				//position shift for the center of gravity of cell in 3D, origin point is starting point of coordinate			Cellnum[i].centroid[0]=Cellnum[i].centroid[0]+Vertices[Cellnum[i].GroupVertex[0]].coordinate[0];			Cellnum[i].centroid[1]=Cellnum[i].centroid[1]+Vertices[Cellnum[i].GroupVertex[0]].coordinate[1];			Cellnum[i].centroid[2]=Cellnum[i].centroid[2]+Vertices[Cellnum[i].GroupVertex[0]].coordinate[2];	}//--------------	//Center of gravity is the starting point,　coordinate shift	imax=Cellnum.size();	for (i=0;i<imax; i++){		//hosei		jmax=Cellnum[i].GroupVertex.size();		for (j=0; j<jmax; j++) {			Cellnum[i].GroupVertex_h[j].coordinate_h[0]=Vertices[Cellnum[i].GroupVertex[j%jmax]].coordinate[0]-Cellnum[i].centroid[0];			Cellnum[i].GroupVertex_h[j].coordinate_h[1]=Vertices[Cellnum[i].GroupVertex[j%jmax]].coordinate[1]-Cellnum[i].centroid[1];			Cellnum[i].GroupVertex_h[j].coordinate_h[2]=Vertices[Cellnum[i].GroupVertex[j%jmax]].coordinate[2]-Cellnum[i].centroid[2];		}	}	//Center of gravity is the starting point, 3D->2D	imax=Cellnum.size();	for (i=0; i<imax; i++) {		jmax=Cellnum[i].GroupVertex_h.size();		for (j=0; j<jmax; j++){			//z-axis angle transformation			Cellnum[i].GroupVertex_h[j].xy_coordinate_z[0]=Cellnum[i].GroupVertex_h[j].coordinate_h[0]*cos(Cellnum[i].sita) +Cellnum[i].GroupVertex_h[j].coordinate_h[1]*sin(Cellnum[i].sita);			Cellnum[i].GroupVertex_h[j].xy_coordinate_z[1]=-Cellnum[i].GroupVertex_h[j].coordinate_h[0]*sin(Cellnum[i].sita) +Cellnum[i].GroupVertex_h[j].coordinate_h[1]*cos(Cellnum[i].sita);			Cellnum[i].GroupVertex_h[j].xy_coordinate_z[2]=Cellnum[i].GroupVertex_h[j].coordinate_h[2];						//y-axis angle transformation			Cellnum[i].GroupVertex_h[j].xy_coordinate[0]=Cellnum[i].GroupVertex_h[j].xy_coordinate_z[0]*cos(Cellnum[i].fai) -Cellnum[i].GroupVertex_h[j].xy_coordinate_z[2]*sin(Cellnum[i].fai);			Cellnum[i].GroupVertex_h[j].xy_coordinate[1]=Cellnum[i].GroupVertex_h[j].xy_coordinate_z[1];			Cellnum[i].GroupVertex_h[j].xy_coordinate[2]=Cellnum[i].GroupVertex_h[j].xy_coordinate_z[0]*sin(Cellnum[i].fai) +Cellnum[i].GroupVertex_h[j].xy_coordinate_z[2]*cos(Cellnum[i].fai);		}	}//---------------	//Cell shaped tensor in 2D	for (i=0; i<imax; i++) {		jmax=Cellnum[i].GroupVertex.size();		for (j=0; j<jmax; j++) {			Cellnum[i].GroupEdge_h[j].af=Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[0]*Cellnum[i].GroupVertex_h[(j+1)%jmax].xy_coordinate[1]				-(Cellnum[i].GroupVertex_h[(j+1)%jmax].xy_coordinate[0]*Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[1]);		}	}			for (i=0; i<imax; i++) {		Cellnum[i].Mxx=0;		Cellnum[i].Myy=0;		Cellnum[i].Mxy=0;	}	for (i=0; i<imax; i++) {		jmax=Cellnum[i].GroupEdge_h.size();		for (j=0; j<jmax; j++) {			Cellnum[i].Mxx+=2*Cellnum[i].GroupEdge_h[j%jmax].af*(Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[1]*Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[1]																+Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[1]*Cellnum[i].GroupVertex_h[(j+1)%jmax].xy_coordinate[1]																+Cellnum[i].GroupVertex_h[(j+1)%jmax].xy_coordinate[1]*Cellnum[i].GroupVertex_h[(j+1)%jmax].xy_coordinate[1])*tf;			Cellnum[i].Myy+=2*Cellnum[i].GroupEdge_h[j%jmax].af*(Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[0]*Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[0]																+Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[0]*Cellnum[i].GroupVertex_h[(j+1)%jmax].xy_coordinate[0]																+Cellnum[i].GroupVertex_h[(j+1)%jmax].xy_coordinate[0]*Cellnum[i].GroupVertex_h[(j+1)%jmax].xy_coordinate[0])*tf;			Cellnum[i].Mxy+=Cellnum[i].GroupEdge_h[j%jmax].af*(Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[0]*Cellnum[i].GroupVertex_h[(j+1)%jmax].xy_coordinate[1]																+2*Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[0]*Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[1]																+2*Cellnum[i].GroupVertex_h[(j+1)%jmax].xy_coordinate[0]*Cellnum[i].GroupVertex_h[(j+1)%jmax].xy_coordinate[1]																+Cellnum[i].GroupVertex_h[(j+1)%jmax].xy_coordinate[0]*Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[1])*tf;		}				//eigenvalue of Moment of cell geometry, eigenvector of Moment of cell geometry in cell aspect		Cellnum[i].ramuda[0]=0.5*((Cellnum[i].Mxx+Cellnum[i].Myy)+sqrt((Cellnum[i].Mxx+Cellnum[i].Myy)*(Cellnum[i].Mxx+Cellnum[i].Myy)-4*(Cellnum[i].Mxx*Cellnum[i].Myy-Cellnum[i].Mxy*Cellnum[i].Mxy)));		Cellnum[i].ramuda[1]=0.5*((Cellnum[i].Mxx+Cellnum[i].Myy)-sqrt((Cellnum[i].Mxx+Cellnum[i].Myy)*(Cellnum[i].Mxx+Cellnum[i].Myy)-4*(Cellnum[i].Mxx*Cellnum[i].Myy-Cellnum[i].Mxy*Cellnum[i].Mxy)));				Cellnum[i].gra1=(Cellnum[i].Mxx-Cellnum[i].ramuda[0])/Cellnum[i].Mxy;		Cellnum[i].gra2=(Cellnum[i].Mxx-Cellnum[i].ramuda[1])/Cellnum[i].Mxy;				Cellnum[i].u_ramuda1[0]=1/sqrt(Cellnum[i].gra1*Cellnum[i].gra1+1);		Cellnum[i].u_ramuda1[1]=Cellnum[i].gra1/sqrt(Cellnum[i].gra1*Cellnum[i].gra1+1);		Cellnum[i].u_ramuda2[0]=1/sqrt(Cellnum[i].gra2*Cellnum[i].gra2+1);		Cellnum[i].u_ramuda2[1]=Cellnum[i].gra2/sqrt(Cellnum[i].gra2*Cellnum[i].gra2+1);				//long axis and short axis of ellipse of cell geometry		Cellnum[i].Mxx_t=Cellnum[i].u_ramuda1[0]*Cellnum[i].u_ramuda1[0]*Cellnum[i].Mxx-2*Cellnum[i].u_ramuda1[0]*Cellnum[i].u_ramuda2[0]*Cellnum[i].Mxy+Cellnum[i].u_ramuda2[0]*Cellnum[i].u_ramuda2[0]*Cellnum[i].Myy;		Cellnum[i].Myy_t=Cellnum[i].u_ramuda1[1]*Cellnum[i].u_ramuda1[1]*Cellnum[i].Mxx-2*Cellnum[i].u_ramuda1[1]*Cellnum[i].u_ramuda2[1]*Cellnum[i].Mxy+Cellnum[i].u_ramuda2[1]*Cellnum[i].u_ramuda2[1]*Cellnum[i].Myy;		if (Cellnum[i].Mxx_t>Cellnum[i].Myy_t) {			Cellnum[i].Long_axis=2*sqrt(Cellnum[i].Mxx_t/Cellnum[i].Area);			Cellnum[i].Short_axis=2*sqrt(Cellnum[i].Myy_t/Cellnum[i].Area);		}		if (Cellnum[i].Myy_t>Cellnum[i].Mxx_t) {			Cellnum[i].Long_axis=2*sqrt(Cellnum[i].Myy_t/Cellnum[i].Area);			Cellnum[i].Short_axis=2*sqrt(Cellnum[i].Mxx_t/Cellnum[i].Area);		}				//eigenvector of Moment of cell geometry in 3D		//y-axis angle transformation			Cellnum[i].u_ramuda1_3dy[0]=Cellnum[i].u_ramuda1[0]*cos(Cellnum[i].fai) +0*sin(Cellnum[i].fai);			Cellnum[i].u_ramuda1_3dy[1]=Cellnum[i].u_ramuda1[1];			Cellnum[i].u_ramuda1_3dy[2]=-Cellnum[i].u_ramuda1[0]*sin(Cellnum[i].fai) +0*cos(Cellnum[i].fai);		//z-axis angle transformation			Cellnum[i].u_ramuda1_3d[0]=Cellnum[i].u_ramuda1_3dy[0]*cos(Cellnum[i].sita) -Cellnum[i].u_ramuda1_3dy[1]*sin(Cellnum[i].sita);			Cellnum[i].u_ramuda1_3d[1]=Cellnum[i].u_ramuda1_3dy[0]*sin(Cellnum[i].sita) +Cellnum[i].u_ramuda1_3dy[1]*cos(Cellnum[i].sita);			Cellnum[i].u_ramuda1_3d[2]=Cellnum[i].u_ramuda1_3dy[2];		//y-axis angle transformation			Cellnum[i].u_ramuda2_3dy[0]=Cellnum[i].u_ramuda2[0]*cos(Cellnum[i].fai) +0*sin(Cellnum[i].fai);			Cellnum[i].u_ramuda2_3dy[1]=Cellnum[i].u_ramuda2[1];			Cellnum[i].u_ramuda2_3dy[2]=-Cellnum[i].u_ramuda2[0]*sin(Cellnum[i].fai) +0*cos(Cellnum[i].fai);		//z-axis angle transformation			Cellnum[i].u_ramuda2_3d[0]=Cellnum[i].u_ramuda2_3dy[0]*cos(Cellnum[i].sita) -Cellnum[i].u_ramuda2_3dy[1]*sin(Cellnum[i].sita);			Cellnum[i].u_ramuda2_3d[1]=Cellnum[i].u_ramuda2_3dy[0]*sin(Cellnum[i].sita) +Cellnum[i].u_ramuda2_3dy[1]*cos(Cellnum[i].sita);			Cellnum[i].u_ramuda2_3d[2]=Cellnum[i].u_ramuda2_3dy[2];			} //cell		    	//tissue growth based cell polarity	int head_boundary, tail_boundary,lateral_boundary;	imax=Cellnum.size();	for (i=0; i<imax; i++) {		if (Cellnum[i].cell_type==1 || Cellnum[i].cell_type==3 || Cellnum[i].cell_type==5) {		//if (Cellnum[i].cell_type==1 || Cellnum[i].cell_type==3 || Cellnum[i].cell_type==5 || Cellnum[i].cell_type==6) {			Cellnum[i].tiss_cent_dr[0]=Cellnum[i].tiss_growth[0];			Cellnum[i].tiss_cent_dr[1]=Cellnum[i].tiss_growth[1];			Cellnum[i].tiss_cent_dr[2]=Cellnum[i].tiss_growth[2];				        tail_boundary=0;		if (Cellnum[i].cell_type==5) {		jmax=Cellnum[i].GroupVertex.size();		for (j=0; j<jmax; j++) {			if(Cellnum[Edge[Cellnum[i].GroupEdge[j%jmax]].Edge_Area[0]].cell_type==6 || Cellnum[Edge[Cellnum[i].GroupEdge[j%jmax]].Edge_Area[1]].cell_type==6){				tail_boundary=1;			}		}            if(tail_boundary==1){            if (flag_ogi==1){                Cellnum[i].tiss_cent_dr[0]=1.0*Cellnum[i].centroid[1]*0.0037;                Cellnum[i].tiss_cent_dr[1]=-1.0*Cellnum[i].centroid[0]*0.0037;                Cellnum[i].tiss_cent_dr[2]=0.0*Cellnum[i].centroid[2]*0.0037;//0.5            }            		}        }				/*	lateral_boundary=0;			if (Cellnum[i].cell_type==1) {			jmax=Cellnum[i].GroupVertex.size();			for (j=0; j<jmax; j++) {				if(Cellnum[Edge[Cellnum[i].GroupEdge[j%jmax]].Edge_Area[0]].cell_type==6 || Cellnum[Edge[Cellnum[i].GroupEdge[j%jmax]].Edge_Area[1]].cell_type==6){					lateral_boundary=1;				}			}				if(lateral_boundary==1){				if (flag_ogi==1){					Cellnum[i].tiss_cent_dr[0]=0.0*Cellnum[i].centroid[1]*0.0037;					Cellnum[i].tiss_cent_dr[1]=0.0*Cellnum[i].centroid[0]*0.0037;					Cellnum[i].tiss_cent_dr[2]=-0.25*Cellnum[i].centroid[2]*0.0037;//0.5				}							}			}*/					head_boundary=0;        if (Cellnum[i].cell_type==3) {		jmax=Cellnum[i].GroupVertex.size();		for (j=0; j<jmax; j++) {			if(Cellnum[Edge[Cellnum[i].GroupEdge[j%jmax]].Edge_Area[0]].cell_type==2 || Cellnum[Edge[Cellnum[i].GroupEdge[j%jmax]].Edge_Area[1]].cell_type==2){				head_boundary=1;			}		}		if(head_boundary==1){            if (flag_ogi==1){					Cellnum[i].tiss_cent_dr[0]=-2.0*Cellnum[i].centroid[1]*0.0037;//1.8					Cellnum[i].tiss_cent_dr[1]=2.0*Cellnum[i].centroid[0]*0.0037;//1.8                    Cellnum[i].tiss_cent_dr[2]=-1.5*Cellnum[i].centroid[2]*0.0037;//1.2			}            if (flag_ogi==0){                    Cellnum[i].tiss_cent_dr[0]=1.3*sqrt(Cellnum[i].centroid[1]*Cellnum[i].centroid[1]+Cellnum[i].centroid[2]*Cellnum[i].centroid[2])*0.0037*(1+abs(Cellnum[i].centroid[2])*0.0037*0.25);//1.2                    Cellnum[i].tiss_cent_dr[1]=1.1*abs(Cellnum[i].centroid[0])/sqrt(2)*0.0037*Cellnum[i].centroid[1]/abs(Cellnum[i].centroid[1]) -2.2*abs(Cellnum[i].centroid[2])*0.0037;//1.2 2.4                    Cellnum[i].tiss_cent_dr[2]=1.1*abs(Cellnum[i].centroid[0])/sqrt(2)*0.0037*Cellnum[i].centroid[2]/abs(Cellnum[i].centroid[2]) +2.2*Cellnum[i].centroid[1]*Cellnum[i].centroid[2]/sqrt(Cellnum[i].centroid[1]*Cellnum[i].centroid[1]+Cellnum[i].centroid[2]*Cellnum[i].centroid[2])*0.0037;//			}		} //boundary        } //cell					} //celltype	}//i		imax=Cellnum.size();	for (i=0; i<imax; i++) {		//Cellnum[i].tiss_cent_dr[0]=0;		//Cellnum[i].tiss_cent_dr[1]=0;		//Cellnum[i].tiss_cent_dr[2]=0;		Cellnum[i].tiss_growth[0]=0;		Cellnum[i].tiss_growth[1]=0;		Cellnum[i].tiss_growth[2]=0;	}		imax=Cellnum.size();	int num_neighbor_cell;	for (i=0; i<imax; i++) {		if (Cellnum[i].cell_type==1 || Cellnum[i].cell_type==3 || Cellnum[i].cell_type==5) {		//if (Cellnum[i].cell_type==1 || Cellnum[i].cell_type==3 || Cellnum[i].cell_type==5 || Cellnum[i].cell_type==6) {			num_neighbor_cell=0;			jmax=Cellnum[i].GroupVertex.size();		for (j=0; j<jmax; j++) {			if(Cellnum[Edge[Cellnum[i].GroupEdge[j%jmax]].Edge_Area[0]].cell_type!=2 && Cellnum[Edge[Cellnum[i].GroupEdge[j%jmax]].Edge_Area[1]].cell_type!=2 && Cellnum[Edge[Cellnum[i].GroupEdge[j%jmax]].Edge_Area[0]].cell_type!=6 && Cellnum[Edge[Cellnum[i].GroupEdge[j%jmax]].Edge_Area[1]].cell_type!=6){				Cellnum[i].tiss_growth[0]+=Cellnum[Cellnum[i].GroupEdge_h[j%jmax].tissue_nc_center].tiss_cent_dr[0]-Cellnum[i].tiss_cent_dr[0];				Cellnum[i].tiss_growth[1]+=Cellnum[Cellnum[i].GroupEdge_h[j%jmax].tissue_nc_center].tiss_cent_dr[1]-Cellnum[i].tiss_cent_dr[1];				Cellnum[i].tiss_growth[2]+=Cellnum[Cellnum[i].GroupEdge_h[j%jmax].tissue_nc_center].tiss_cent_dr[2]-Cellnum[i].tiss_cent_dr[2];				num_neighbor_cell+=1;			}		}			Cellnum[i].tiss_growth[0]=Cellnum[i].tiss_growth[0]/num_neighbor_cell;			Cellnum[i].tiss_growth[1]=Cellnum[i].tiss_growth[1]/num_neighbor_cell;			Cellnum[i].tiss_growth[2]=Cellnum[i].tiss_growth[2]/num_neighbor_cell;						if (Cellnum[i].cell_type==1) {			Cellnum[i].tiss_growth[0]=Cellnum[i].tiss_cent_dr[0]+Cellnum[i].tiss_growth[0]*0.15;//0.02			Cellnum[i].tiss_growth[1]=Cellnum[i].tiss_cent_dr[1]+Cellnum[i].tiss_growth[1]*0.15;			Cellnum[i].tiss_growth[2]=Cellnum[i].tiss_cent_dr[2]+Cellnum[i].tiss_growth[2]*0.15;			}			if (Cellnum[i].cell_type==3) {			Cellnum[i].tiss_growth[0]=Cellnum[i].tiss_cent_dr[0]+Cellnum[i].tiss_growth[0]*0.1;//0.02			Cellnum[i].tiss_growth[1]=Cellnum[i].tiss_cent_dr[1]+Cellnum[i].tiss_growth[1]*0.1;			Cellnum[i].tiss_growth[2]=Cellnum[i].tiss_cent_dr[2]+Cellnum[i].tiss_growth[2]*0.1;			}			/*if (Cellnum[i].cell_type==6) {			Cellnum[i].tiss_growth[0]=Cellnum[i].tiss_cent_dr[0]+Cellnum[i].tiss_growth[0]*0.1;//0.02			Cellnum[i].tiss_growth[1]=Cellnum[i].tiss_cent_dr[1]+Cellnum[i].tiss_growth[1]*0.1;			Cellnum[i].tiss_growth[2]=Cellnum[i].tiss_cent_dr[2]+Cellnum[i].tiss_growth[2]*0.1;			}*/						if (Cellnum[i].cell_type==5) {                if (flag_ogi==0){                    Cellnum[i].tiss_growth[0]=(Cellnum[i].tiss_cent_dr[0]+Cellnum[i].tiss_growth[0]*0.0);                    Cellnum[i].tiss_growth[1]=(Cellnum[i].tiss_cent_dr[1]+Cellnum[i].tiss_growth[1]*0.05);//0.001                    Cellnum[i].tiss_growth[2]=(Cellnum[i].tiss_cent_dr[2]+Cellnum[i].tiss_growth[2]*0.05);                }                if (flag_ogi==1){                    Cellnum[i].tiss_growth[0]=(Cellnum[i].tiss_cent_dr[0]+Cellnum[i].tiss_growth[0]*0.1);//0.01                    Cellnum[i].tiss_growth[1]=(Cellnum[i].tiss_cent_dr[1]+Cellnum[i].tiss_growth[1]*0.1);                    Cellnum[i].tiss_growth[2]=(Cellnum[i].tiss_cent_dr[2]+Cellnum[i].tiss_growth[2]*0.1);                }			}		} //if	} //i	    imax=Cellnum.size();    for (i=0;i<imax; i++){        jmax=Cellnum[i].GroupEdge.size();        for (j=0; j<jmax; j++) {            Cellnum[i].GroupEdge_h[j].sita_edge=0;        }    }    imax=Cellnum.size();    double edge_x,edge_y,edge_z;    double R_tiss_cent_dr;    for (i=0; i<imax; i++) {        if (Cellnum[i].cell_type==1 || Cellnum[i].cell_type==3 || Cellnum[i].cell_type==5) {		//if (Cellnum[i].cell_type==1 || Cellnum[i].cell_type==3 || Cellnum[i].cell_type==5 || Cellnum[i].cell_type==6) {        jmax=Cellnum[i].GroupVertex.size();        for (j=0; j<jmax; j++) {            edge_x=Vertices[Cellnum[i].GroupVertex[(j+1)%jmax]].coordinate[0]-Vertices[Cellnum[i].GroupVertex[j%jmax]].coordinate[0];            edge_y=Vertices[Cellnum[i].GroupVertex[(j+1)%jmax]].coordinate[1]-Vertices[Cellnum[i].GroupVertex[j%jmax]].coordinate[1];            edge_z=Vertices[Cellnum[i].GroupVertex[(j+1)%jmax]].coordinate[2]-Vertices[Cellnum[i].GroupVertex[j%jmax]].coordinate[2];            R_tiss_cent_dr=sqrt(Cellnum[i].tiss_growth[0]*Cellnum[i].tiss_growth[0]+Cellnum[i].tiss_growth[1]*Cellnum[i].tiss_growth[1]+Cellnum[i].tiss_growth[2]*Cellnum[i].tiss_growth[2]);            if (R_tiss_cent_dr==0) {            Cellnum[i].GroupEdge_h[j%jmax].sita_edge=0.5*M_PI;            }            if (R_tiss_cent_dr>0) {            Cellnum[i].GroupEdge_h[j%jmax].sita_edge=acos((edge_x*Cellnum[i].tiss_growth[0]+edge_y*Cellnum[i].tiss_growth[1]+edge_z*Cellnum[i].tiss_growth[2])/(Cellnum[i].GroupEdge_h[j%jmax].R_edge*R_tiss_cent_dr));            }        }        }    }    }//Geometory_cellvoid Tissue::VertexDynamics() {//force applied to each vertex	imax=Vertices.size();	for (i=0; i<imax; i++) {		Vertices[i].Fx=0;		Vertices[i].Fy=0;		Vertices[i].Fz=0;	}    	imax=Cellnum.size();	int vertex1,vertex2,cell_en1,cell_en2;    double sita_pn,edge_grv,edge_grh,R_tiss_cent_dr;   	for (i=0; i<imax; i++) {		if (Cellnum[i].cell_type==1 || Cellnum[i].cell_type==3 || Cellnum[i].cell_type==5 || Cellnum[i].cell_type==6) {		jmax=Cellnum[i].GroupVertex.size();		for (j=0; j<jmax; j++) {			//area_elastic expansion			Vertices[Cellnum[i].GroupVertex[j]].Fx+=-Cellnum[i].k_area*(Cellnum[i].Area-Cellnum[i].Area0)/(4*Cellnum[i].Area)					*(Cellnum[i].Area_z*(Cellnum[i].GroupVertex_h[(j+1)%jmax].r_vector[1]-Cellnum[i].GroupVertex_h[(j-1+jmax)%jmax].r_vector[1])					  +Cellnum[i].Area_y*(Cellnum[i].GroupVertex_h[(j-1+jmax)%jmax].r_vector[2]-Cellnum[i].GroupVertex_h[(j+1)%jmax].r_vector[2]));//area_fx			Vertices[Cellnum[i].GroupVertex[j]].Fy+=-Cellnum[i].k_area*(Cellnum[i].Area-Cellnum[i].Area0)/(4*Cellnum[i].Area)					*(Cellnum[i].Area_x*(Cellnum[i].GroupVertex_h[(j+1)%jmax].r_vector[2]-Cellnum[i].GroupVertex_h[(j-1+jmax)%jmax].r_vector[2])					  +Cellnum[i].Area_z*(Cellnum[i].GroupVertex_h[(j-1+jmax)%jmax].r_vector[0]-Cellnum[i].GroupVertex_h[(j+1)%jmax].r_vector[0]));//area_fy			Vertices[Cellnum[i].GroupVertex[j]].Fz+=-Cellnum[i].k_area*(Cellnum[i].Area-Cellnum[i].Area0)/(4*Cellnum[i].Area)					*(Cellnum[i].Area_y*(Cellnum[i].GroupVertex_h[(j+1)%jmax].r_vector[0]-Cellnum[i].GroupVertex_h[(j-1+jmax)%jmax].r_vector[0])					  +Cellnum[i].Area_x*(Cellnum[i].GroupVertex_h[(j-1+jmax)%jmax].r_vector[1]-Cellnum[i].GroupVertex_h[(j+1)%jmax].r_vector[1]));//area_fz			                        //Edge tension depend on cell polarity. The edge is shared to the neighboring cells, so multiply by 0.5            if (Cellnum[i].cell_type==1 || Cellnum[i].cell_type==3 || Cellnum[i].cell_type==5) {                vertex1=Cellnum[i].GroupVertex[j%jmax];                vertex2=Cellnum[i].GroupVertex[(j+1)%jmax];				//concerned to cell polarity                R_tiss_cent_dr=sqrt(Cellnum[i].tiss_growth[0]*Cellnum[i].tiss_growth[0]+Cellnum[i].tiss_growth[1]*Cellnum[i].tiss_growth[1]+Cellnum[i].tiss_growth[2]*Cellnum[i].tiss_growth[2]);                if(Cellnum[i].GroupEdge_h[j%jmax].sita_edge<=0.5*M_PI){                    sita_pn=1;                    }                if(Cellnum[i].GroupEdge_h[j%jmax].sita_edge>0.5*M_PI){                    sita_pn=-1;                    }                if(flag_ogi==0) {                    edge_grv=10*R_tiss_cent_dr;//20                    edge_grh=0*R_tiss_cent_dr;                    }                if(flag_ogi==1) {                    edge_grv=10*R_tiss_cent_dr;//20                    edge_grh=0*R_tiss_cent_dr;                    }                                if(Cellnum[Edge[Cellnum[i].GroupEdge[j%jmax]].Edge_Area[0]].cell_type!=2 && Cellnum[Edge[Cellnum[i].GroupEdge[j%jmax]].Edge_Area[1]].cell_type!=2 && Cellnum[Edge[Cellnum[i].GroupEdge[j%jmax]].Edge_Area[0]].cell_type!=6 && Cellnum[Edge[Cellnum[i].GroupEdge[j%jmax]].Edge_Area[1]].cell_type!=6){                    Vertices[vertex1].Fx+=-0.5*Cellnum[i].GroupEdge_h[j%jmax].k_api*(edge_grv*cos(Cellnum[i].GroupEdge_h[j%jmax].sita_edge)+edge_grh*sita_pn*sin(Cellnum[i].GroupEdge_h[j%jmax].sita_edge))/Cellnum[i].GroupEdge_h[j%jmax].R_edge                                             *(Vertices[vertex1].coordinate[0]-Vertices[vertex2].coordinate[0]);//edge_fx                    Vertices[vertex2].Fx+=-0.5*Cellnum[i].GroupEdge_h[j%jmax].k_api*(edge_grv*cos(M_PI-Cellnum[i].GroupEdge_h[j%jmax].sita_edge)-edge_grh*sita_pn*sin(M_PI-Cellnum[i].GroupEdge_h[j%jmax].sita_edge))/Cellnum[i].GroupEdge_h[j%jmax].R_edge                                             *(Vertices[vertex2].coordinate[0]-Vertices[vertex1].coordinate[0]);//edge_fx                    Vertices[vertex1].Fy+=-0.5*Cellnum[i].GroupEdge_h[j%jmax].k_api*(edge_grv*cos(Cellnum[i].GroupEdge_h[j%jmax].sita_edge)+edge_grh*sita_pn*sin(Cellnum[i].GroupEdge_h[j%jmax].sita_edge))/Cellnum[i].GroupEdge_h[j%jmax].R_edge                                             *(Vertices[vertex1].coordinate[1]-Vertices[vertex2].coordinate[1]);//edge_fy                    Vertices[vertex2].Fy+=-0.5*Cellnum[i].GroupEdge_h[j%jmax].k_api*(edge_grv*cos(M_PI-Cellnum[i].GroupEdge_h[j%jmax].sita_edge)-edge_grh*sita_pn*sin(M_PI-Cellnum[i].GroupEdge_h[j%jmax].sita_edge))/Cellnum[i].GroupEdge_h[j%jmax].R_edge                                             *(Vertices[vertex2].coordinate[1]-Vertices[vertex1].coordinate[1]);//edge_fy                    Vertices[vertex1].Fz+=-0.5*Cellnum[i].GroupEdge_h[j%jmax].k_api*(edge_grv*cos(Cellnum[i].GroupEdge_h[j%jmax].sita_edge)+edge_grh*sita_pn*sin(Cellnum[i].GroupEdge_h[j%jmax].sita_edge))/Cellnum[i].GroupEdge_h[j%jmax].R_edge                                             *(Vertices[vertex1].coordinate[2]-Vertices[vertex2].coordinate[2]);//edge_fz                    Vertices[vertex2].Fz+=-0.5*Cellnum[i].GroupEdge_h[j%jmax].k_api*(edge_grv*cos(M_PI-Cellnum[i].GroupEdge_h[j%jmax].sita_edge)-edge_grh*sita_pn*sin(M_PI-Cellnum[i].GroupEdge_h[j%jmax].sita_edge))/Cellnum[i].GroupEdge_h[j%jmax].R_edge                                             *(Vertices[vertex2].coordinate[2]-Vertices[vertex1].coordinate[2]);//edge_fz                }           }            			//general Edge tension. The edge is shared to the neighboring cells, so multiply by 0.5.            vertex1=Cellnum[i].GroupVertex[j%jmax];            vertex2=Cellnum[i].GroupVertex[(j+1)%jmax];			cell_en1=Edge[Cellnum[i].GroupEdge[j%jmax]].Edge_Area[0];			cell_en2=Edge[Cellnum[i].GroupEdge[j%jmax]].Edge_Area[1];			            Vertices[vertex1].Fx+=-0.5*Cellnum[i].GroupEdge_h[j%jmax].k_api/Cellnum[i].GroupEdge_h[j%jmax].R_edge                                        *(Vertices[vertex1].coordinate[0]-Vertices[vertex2].coordinate[0]);//edge_fx            Vertices[vertex2].Fx+=-0.5*Cellnum[i].GroupEdge_h[j%jmax].k_api/Cellnum[i].GroupEdge_h[j%jmax].R_edge                                        *(Vertices[vertex2].coordinate[0]-Vertices[vertex1].coordinate[0]);//edge_fx            Vertices[vertex1].Fy+=-0.5*Cellnum[i].GroupEdge_h[j%jmax].k_api/Cellnum[i].GroupEdge_h[j%jmax].R_edge                                        *(Vertices[vertex1].coordinate[1]-Vertices[vertex2].coordinate[1]);//edge_fy            Vertices[vertex2].Fy+=-0.5*Cellnum[i].GroupEdge_h[j%jmax].k_api/Cellnum[i].GroupEdge_h[j%jmax].R_edge                                        *(Vertices[vertex2].coordinate[1]-Vertices[vertex1].coordinate[1]);//edge_fy            Vertices[vertex1].Fz+=-0.5*Cellnum[i].GroupEdge_h[j%jmax].k_api/Cellnum[i].GroupEdge_h[j%jmax].R_edge                                        *(Vertices[vertex1].coordinate[2]-Vertices[vertex2].coordinate[2]);//edge_fz            Vertices[vertex2].Fz+=-0.5*Cellnum[i].GroupEdge_h[j%jmax].k_api/Cellnum[i].GroupEdge_h[j%jmax].R_edge                                        *(Vertices[vertex2].coordinate[2]-Vertices[vertex1].coordinate[2]);//edge_fz									//edge tension of embryo boundary			if(Cellnum[Edge[Cellnum[i].GroupEdge[j%jmax]].Edge_Area[0]].cell_type==2 || Cellnum[Edge[Cellnum[i].GroupEdge[j%jmax]].Edge_Area[1]].cell_type==2 ||Cellnum[Edge[Cellnum[i].GroupEdge[j%jmax]].Edge_Area[0]].cell_type==6 || Cellnum[Edge[Cellnum[i].GroupEdge[j%jmax]].Edge_Area[1]].cell_type==6){				Vertices[vertex1].Fx+=-0.5*Cellnum[i].GroupEdge_h[j%jmax].k_api*(Vertices[vertex1].coordinate[0]-Vertices[vertex2].coordinate[0]);//edge_fx				Vertices[vertex2].Fx+=-0.5*Cellnum[i].GroupEdge_h[j%jmax].k_api*(Vertices[vertex2].coordinate[0]-Vertices[vertex1].coordinate[0]);//edge_fx				Vertices[vertex1].Fy+=-0.5*Cellnum[i].GroupEdge_h[j%jmax].k_api*(Vertices[vertex1].coordinate[1]-Vertices[vertex2].coordinate[1]);//edge_fy				Vertices[vertex2].Fy+=-0.5*Cellnum[i].GroupEdge_h[j%jmax].k_api*(Vertices[vertex2].coordinate[1]-Vertices[vertex1].coordinate[1]);//edge_fy				Vertices[vertex1].Fz+=-0.5*Cellnum[i].GroupEdge_h[j%jmax].k_api*(Vertices[vertex1].coordinate[2]-Vertices[vertex2].coordinate[2]);//edge_fz				Vertices[vertex2].Fz+=-0.5*Cellnum[i].GroupEdge_h[j%jmax].k_api*(Vertices[vertex2].coordinate[2]-Vertices[vertex1].coordinate[2]);//edge_fz			}    		//perimeter contraction		if (Cellnum[i].cell_type==6) {		Vertices[Cellnum[i].GroupVertex[j]].Fx+=-Cellnum[i].k_peri*(Cellnum[i].Perimeter-Cellnum[i].Perimeter0)				*((Vertices[Cellnum[i].GroupVertex[j%jmax]].coordinate[0]-Vertices[Cellnum[i].GroupVertex[(j+1)%jmax]].coordinate[0])/Cellnum[i].GroupEdge_h[j%jmax].R_edge				  -(Vertices[Cellnum[i].GroupVertex[(j-1+jmax)%jmax]].coordinate[0]-Vertices[Cellnum[i].GroupVertex[j%jmax]].coordinate[0])/Cellnum[i].GroupEdge_h[(j-1+jmax)%jmax].R_edge);//perimeter_fx		Vertices[Cellnum[i].GroupVertex[j]].Fy+=-Cellnum[i].k_peri*(Cellnum[i].Perimeter-Cellnum[i].Perimeter0)				*((Vertices[Cellnum[i].GroupVertex[j%jmax]].coordinate[1]-Vertices[Cellnum[i].GroupVertex[(j+1)%jmax]].coordinate[1])/Cellnum[i].GroupEdge_h[j%jmax].R_edge				-(Vertices[Cellnum[i].GroupVertex[(j-1+jmax)%jmax]].coordinate[1]-Vertices[Cellnum[i].GroupVertex[j%jmax]].coordinate[1])/Cellnum[i].GroupEdge_h[(j-1+jmax)%jmax].R_edge);//perimeter_fy		Vertices[Cellnum[i].GroupVertex[j]].Fz+=-Cellnum[i].k_peri*(Cellnum[i].Perimeter-Cellnum[i].Perimeter0)				*((Vertices[Cellnum[i].GroupVertex[j%jmax]].coordinate[2]-Vertices[Cellnum[i].GroupVertex[(j+1)%jmax]].coordinate[2])/Cellnum[i].GroupEdge_h[j%jmax].R_edge				  -(Vertices[Cellnum[i].GroupVertex[(j-1+jmax)%jmax]].coordinate[2]-Vertices[Cellnum[i].GroupVertex[j%jmax]].coordinate[2])/Cellnum[i].GroupEdge_h[(j-1+jmax)%jmax].R_edge);//perimeter_fz		} //if						//P0 = 0			if (Cellnum[i].cell_type==1 || Cellnum[i].cell_type==3 || Cellnum[i].cell_type==5) {			Vertices[Cellnum[i].GroupVertex[j]].Fx+=-Cellnum[i].k_peri*(Cellnum[i].Perimeter)					*((Vertices[Cellnum[i].GroupVertex[j%jmax]].coordinate[0]-Vertices[Cellnum[i].GroupVertex[(j+1)%jmax]].coordinate[0])/Cellnum[i].GroupEdge_h[j%jmax].R_edge					  -(Vertices[Cellnum[i].GroupVertex[(j-1+jmax)%jmax]].coordinate[0]-Vertices[Cellnum[i].GroupVertex[j%jmax]].coordinate[0])/Cellnum[i].GroupEdge_h[(j-1+jmax)%jmax].R_edge);//perimeter_fx			Vertices[Cellnum[i].GroupVertex[j]].Fy+=-Cellnum[i].k_peri*(Cellnum[i].Perimeter)					*((Vertices[Cellnum[i].GroupVertex[j%jmax]].coordinate[1]-Vertices[Cellnum[i].GroupVertex[(j+1)%jmax]].coordinate[1])/Cellnum[i].GroupEdge_h[j%jmax].R_edge					-(Vertices[Cellnum[i].GroupVertex[(j-1+jmax)%jmax]].coordinate[1]-Vertices[Cellnum[i].GroupVertex[j%jmax]].coordinate[1])/Cellnum[i].GroupEdge_h[(j-1+jmax)%jmax].R_edge);//perimeter_fy			Vertices[Cellnum[i].GroupVertex[j]].Fz+=-Cellnum[i].k_peri*(Cellnum[i].Perimeter)					*((Vertices[Cellnum[i].GroupVertex[j%jmax]].coordinate[2]-Vertices[Cellnum[i].GroupVertex[(j+1)%jmax]].coordinate[2])/Cellnum[i].GroupEdge_h[j%jmax].R_edge					  -(Vertices[Cellnum[i].GroupVertex[(j-1+jmax)%jmax]].coordinate[2]-Vertices[Cellnum[i].GroupVertex[j%jmax]].coordinate[2])/Cellnum[i].GroupEdge_h[(j-1+jmax)%jmax].R_edge);//perimeter_fz			} //if celltype					} //cellvertex	}//if celltype        	} //cell				//tissue binding tension to embryo diamiter size	imax=Vertices.size();	for (i=0; i<imax; i++) {		Vertices[i].Fx+=-Vertices[i].k_ball*(Vertices[i].vertex_r-Vertices[i].vertex_r0)/(Vertices[i].vertex_r)*(Vertices[i].coordinate[0]);		Vertices[i].Fy+=-Vertices[i].k_ball*(Vertices[i].vertex_r-Vertices[i].vertex_r0)/(Vertices[i].vertex_r)*(Vertices[i].coordinate[1]);		Vertices[i].Fz+=-Vertices[i].k_ball*(Vertices[i].vertex_r-Vertices[i].vertex_r0)/(Vertices[i].vertex_r)*(Vertices[i].coordinate[2]);	}/*//stress tensor--------	imax=Cellnum.size();    for (i=0; i<imax; i++) {        Cellnum[i].Sxx=0;        Cellnum[i].Syy=0;        Cellnum[i].Sxy=0;        jmax=Cellnum[i].GroupVertex.size();        for (j=0; j<jmax; j++) {            Cellnum[i].GroupVertex_h[j].Fx=0;            Cellnum[i].GroupVertex_h[j].Fy=0;			Cellnum[i].GroupVertex_h[j].Fz=0;        }    }//force by one cellimax=Cellnum.size();for (i=0; i<imax; i++) {    jmax=Cellnum[i].GroupVertex.size();    for (j=0; j<jmax; j++) {        //area_elastic        Cellnum[i].GroupVertex_h[j].Fx+=-Cellnum[i].k_area*(Cellnum[i].Area-Cellnum[i].Area0)*(Cellnum[i].GroupVertex_h[(j+1)%jmax].xy_coordinate[1]-Cellnum[i].GroupVertex_h[(j-1+jmax)%jmax].xy_coordinate[1]);//area_fx        Cellnum[i].GroupVertex_h[j].Fy+=-Cellnum[i].k_area*(Cellnum[i].Area-Cellnum[i].Area0)*(-Cellnum[i].GroupVertex_h[(j+1)%jmax].xy_coordinate[0]+Cellnum[i].GroupVertex_h[(j-1+jmax)%jmax].xy_coordinate[0]);//area_fy        		//Edge tension        //vertex1=Edge[Cellnum[i].GroupEdge[j]].Edge_Vertex[0];        //vertex2=Edge[Cellnum[i].GroupEdge[j]].Edge_Vertex[1];        Cellnum[i].GroupVertex_h[j].Fx+=-0.5*Cellnum[i].GroupEdge_h[j%jmax].k_api/Cellnum[i].GroupEdge_h[j%jmax].R_edge*(Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[0]-Cellnum[i].GroupVertex_h[(j+1)%jmax].xy_coordinate[0]);        Cellnum[i].GroupVertex_h[j].Fy+=-0.5*Cellnum[i].GroupEdge_h[j%jmax].k_api/Cellnum[i].GroupEdge_h[j%jmax].R_edge*(Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[1]-Cellnum[i].GroupVertex_h[(j+1)%jmax].xy_coordinate[1]);        Cellnum[i].GroupVertex_h[(j+1)%jmax].Fx+=-0.5*Cellnum[i].GroupEdge_h[j%jmax].k_api/Cellnum[i].GroupEdge_h[j%jmax].R_edge*(Cellnum[i].GroupVertex_h[(j+1)%jmax].xy_coordinate[0]-Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[0]);        Cellnum[i].GroupVertex_h[(j+1)%jmax].Fy+=-0.5*Cellnum[i].GroupEdge_h[j%jmax].k_api/Cellnum[i].GroupEdge_h[j%jmax].R_edge*(Cellnum[i].GroupVertex_h[(j+1)%jmax].xy_coordinate[1]-Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[1]);				//perimeter contraction		Cellnum[i].GroupVertex_h[j].Fx+=-Cellnum[i].k_peri*(Cellnum[i].Perimeter-Cellnum[i].Perimeter0)			   *((Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[0]-Cellnum[i].GroupVertex_h[(j+1)%jmax].xy_coordinate[0])/Cellnum[i].GroupEdge_h[j%jmax].R_edge				 -(Cellnum[i].GroupVertex_h[(j-1+jmax)%jmax].xy_coordinate[0]-Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[0])/Cellnum[i].GroupEdge_h[(j-1+jmax)%jmax].R_edge);//perimeter_fx		Cellnum[i].GroupVertex_h[j].Fy+=-Cellnum[i].k_peri*(Cellnum[i].Perimeter-Cellnum[i].Perimeter0)			   *((Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[1]-Cellnum[i].GroupVertex_h[(j+1)%jmax].xy_coordinate[1])/Cellnum[i].GroupEdge_h[j%jmax].R_edge			   -(Cellnum[i].GroupVertex_h[(j-1+jmax)%jmax].xy_coordinate[1]-Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[1])/Cellnum[i].GroupEdge_h[(j-1+jmax)%jmax].R_edge);//perimeter_fy		            } //vertex        } //cell	//calculte stress tensor    for (i=0; i<imax; i++) {        jmax=Cellnum[i].GroupVertex.size();        for (j=0; j<jmax; j++) {            Cellnum[i].Sxx+=1/(3*Cellnum[i].Area)*(Cellnum[i].GroupVertex_h[j%jmax].Fx*Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[0]+Cellnum[i].GroupVertex_h[(j+1)%jmax].Fx*Cellnum[i].GroupVertex_h[(j+1)%jmax].xy_coordinate[0])            +1/(6*Cellnum[i].Area)*(Cellnum[i].GroupVertex_h[j%jmax].Fx*Cellnum[i].GroupVertex_h[(j+1)%jmax].xy_coordinate[0]+Cellnum[i].GroupVertex_h[(j+1)%jmax].Fx*Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[0]);//Sxx            Cellnum[i].Syy+=1/(3*Cellnum[i].Area)*(Cellnum[i].GroupVertex_h[j%jmax].Fy*Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[1]+Cellnum[i].GroupVertex_h[(j+1)%jmax].Fy*Cellnum[i].GroupVertex_h[(j+1)%jmax].xy_coordinate[1])            +1/(6*Cellnum[i].Area)*(Cellnum[i].GroupVertex_h[j%jmax].Fy*Cellnum[i].GroupVertex_h[(j+1)%jmax].xy_coordinate[1]+Cellnum[i].GroupVertex_h[(j+1)%jmax].Fy*Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[1]);//Syy            Cellnum[i].Sxy+=1/(6*Cellnum[i].Area)*(Cellnum[i].GroupVertex_h[j%jmax].Fx*Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[1]+Cellnum[i].GroupVertex_h[j%jmax].Fy*Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[0]                                                   +Cellnum[i].GroupVertex_h[(j+1)%jmax].Fx*Cellnum[i].GroupVertex_h[(j+1)%jmax].xy_coordinate[1]+Cellnum[i].GroupVertex_h[(j+1)%jmax].Fy*Cellnum[i].GroupVertex_h[(j+1)%jmax].xy_coordinate[0])            +1/(12*Cellnum[i].Area)*(Cellnum[i].GroupVertex_h[j%jmax].Fx*Cellnum[i].GroupVertex_h[(j+1)%jmax].xy_coordinate[1]+Cellnum[i].GroupVertex_h[j%jmax].Fy*Cellnum[i].GroupVertex_h[(j+1)%jmax].xy_coordinate[0]+                                     Cellnum[i].GroupVertex_h[(j+1)%jmax].Fx*Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[1]+Cellnum[i].GroupVertex_h[(j+1)%jmax].Fy*Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[0]);//Sxy        }        		//max and min tensor        Cellnum[i].S1=0.5*((Cellnum[i].Sxx+Cellnum[i].Syy)+sqrt((Cellnum[i].Sxx-Cellnum[i].Syy)*(Cellnum[i].Sxx-Cellnum[i].Syy)+4*Cellnum[i].Sxy*Cellnum[i].Sxy));        Cellnum[i].S2=0.5*((Cellnum[i].Sxx+Cellnum[i].Syy)-sqrt((Cellnum[i].Sxx-Cellnum[i].Syy)*(Cellnum[i].Sxx-Cellnum[i].Syy)+4*Cellnum[i].Sxy*Cellnum[i].Sxy));        //tensor angle with max and min        Cellnum[i].Theta1=atan((Cellnum[i].S1-Cellnum[i].Sxx)/Cellnum[i].Sxy);        Cellnum[i].Theta2=atan((Cellnum[i].S2-Cellnum[i].Sxx)/Cellnum[i].Sxy);    }    */    //Euler method---------	imax=Vertices.size();	for (i=0; i<imax; i++) {		Vertices[i].coordinate[0]=Vertices[i].coordinate[0]+dt*Vertices[i].Fx;		Vertices[i].coordinate[1]=Vertices[i].coordinate[1]+dt*Vertices[i].Fy;		Vertices[i].coordinate[2]=Vertices[i].coordinate[2]+dt*Vertices[i].Fz;		//cout << Vertices[i].Fx << "	"<< Vertices[i].Fy << "	"<< Vertices[i].Fz <<endl;	}  	}//vertexdynamics closevoid Tissue::Reaction() {	imax=Cellnum.size();	for (i=0; i<imax; i++) {		Cellnum[i].d_diff[0]=0;		Cellnum[i].d_diff[1]=0;        Cellnum[i].d_diff[2]=0;		Cellnum[i].d_diff[3]=0;	}		imax=Cellnum.size();	for (i=0; i<imax; i++) {		if (Cellnum[i].cell_type==1 || Cellnum[i].cell_type==3 || Cellnum[i].cell_type==5) {			Cellnum[i].d_diff[0]+=Cellnum[i].P_0*((Cellnum[i].diff[0]) -pow((Cellnum[i].diff[0]),3)) -Cellnum[i].S_0*(Cellnum[i].diff[1]) -Cellnum[i].B_0*(Cellnum[i].diff[2]);			Cellnum[i].d_diff[1]+=Cellnum[i].P_1*(Cellnum[i].diff[0]) -Cellnum[i].B_1*(Cellnum[i].diff[3]) -Cellnum[i].S_1*(Cellnum[i].diff[1]);			Cellnum[i].d_diff[2]+=Cellnum[i].P_2*(Cellnum[i].diff[3]) -Cellnum[i].S_2*(Cellnum[i].diff[1]) -Cellnum[i].B_2*(Cellnum[i].diff[3]);			Cellnum[i].d_diff[3]+=Cellnum[i].P_3*((Cellnum[i].diff[3]) -pow((Cellnum[i].diff[3]),3)) -Cellnum[i].S_3*(Cellnum[i].diff[2]) -Cellnum[i].B_3*(Cellnum[i].diff[1]);	} //if	} //for		imax=Cellnum.size();	for (i=0; i<imax; i++) {		if (Cellnum[i].cell_type==2 || Cellnum[i].cell_type==6) {		Cellnum[i].d_diff[0]=0;		Cellnum[i].d_diff[1]=0;        Cellnum[i].d_diff[2]=0;		Cellnum[i].d_diff[3]=0;		}	}		//Euler method---------	imax=Cellnum.size();	for (i=0; i<imax; i++) {		Cellnum[i].diff[0]=Cellnum[i].diff[0]+dt_R*Cellnum[i].d_diff[0];		Cellnum[i].diff[1]=Cellnum[i].diff[1]+dt_R*Cellnum[i].d_diff[1];        Cellnum[i].diff[2]=Cellnum[i].diff[2]+dt_R*Cellnum[i].d_diff[2];		Cellnum[i].diff[3]=Cellnum[i].diff[3]+dt_R*Cellnum[i].d_diff[3];				if (Cellnum[i].diff[0]<0) {			Cellnum[i].diff[0]=0;		}		if (Cellnum[i].diff[1]<0) {			Cellnum[i].diff[1]=0;		}		if (Cellnum[i].diff[2]<0) {			Cellnum[i].diff[2]=0;		}		if (Cellnum[i].diff[3]<0) {			Cellnum[i].diff[3]=0;		}	}} //Reaction closevoid Tissue::Diffusion() {	imax=Cellnum.size();	for (i=0; i<imax; i++) {		Cellnum[i].d_diff[0]=0;		Cellnum[i].d_diff[1]=0;        Cellnum[i].d_diff[2]=0;		Cellnum[i].d_diff[3]=0;	}		double yz_direction, center_center, x_d,y_d,z_d,u0_d,u1_d,u2_d,u3_d;	imax=Cellnum.size();	for (i=0; i<imax; i++) {		if (Cellnum[i].cell_type==1 || Cellnum[i].cell_type==3 || Cellnum[i].cell_type==5) {		yz_direction=cos(atan(Cellnum[i].centroid[1]/Cellnum[i].centroid[2]));		jmax=Cellnum[i].GroupEdge.size();		for (j=0; j<jmax; j++) {		for (k=0; k<2; k++) {			if (Edge[Cellnum[i].GroupEdge[j%jmax]].Edge_Area[k]!= i && (Cellnum[Edge[Cellnum[i].GroupEdge[j%jmax]].Edge_Area[k]].cell_type!=2 || Cellnum[Edge[Cellnum[i].GroupEdge[j]].Edge_Area[k]].cell_type!=6)) {				x_d=(Cellnum[Edge[Cellnum[i].GroupEdge[j%jmax]].Edge_Area[k]].centroid[0] -Cellnum[i].centroid[0]);				y_d=(Cellnum[Edge[Cellnum[i].GroupEdge[j%jmax]].Edge_Area[k]].centroid[1] -Cellnum[i].centroid[1]);				z_d=(Cellnum[Edge[Cellnum[i].GroupEdge[j%jmax]].Edge_Area[k]].centroid[2] -Cellnum[i].centroid[2]);				center_center=sqrt(x_d*x_d+y_d*y_d+z_d*z_d);                u0_d=(Cellnum[Edge[Cellnum[i].GroupEdge[j%jmax]].Edge_Area[k]].diff[0] -Cellnum[i].diff[0]);                u1_d=(Cellnum[Edge[Cellnum[i].GroupEdge[j%jmax]].Edge_Area[k]].diff[1] -Cellnum[i].diff[1]);                u2_d=(Cellnum[Edge[Cellnum[i].GroupEdge[j%jmax]].Edge_Area[k]].diff[2] -Cellnum[i].diff[2]);                u2_d=(Cellnum[Edge[Cellnum[i].GroupEdge[j%jmax]].Edge_Area[k]].diff[3] -Cellnum[i].diff[3]);                				Cellnum[i].d_diff[0]+=Cellnum[i].D_0*Cellnum[i].GroupEdge_h[j%jmax].R_edge*u0_d/(center_center*center_center);				Cellnum[i].d_diff[1]+=Cellnum[i].D_1*Cellnum[i].GroupEdge_h[j%jmax].R_edge*u1_d/(center_center*center_center);				Cellnum[i].d_diff[2]+=Cellnum[i].D_2*Cellnum[i].GroupEdge_h[j%jmax].R_edge*u2_d/(center_center*center_center);				Cellnum[i].d_diff[3]+=Cellnum[i].D_3*Cellnum[i].GroupEdge_h[j%jmax].R_edge*u3_d/(center_center*center_center);                } //if		} //for		} //for	} //if	} //for		imax=Cellnum.size();	for (i=0; i<imax; i++) {		if (Cellnum[i].cell_type==2 || Cellnum[i].cell_type==6) {		Cellnum[i].d_diff[0]=0;		Cellnum[i].d_diff[1]=0;        Cellnum[i].d_diff[2]=0;		Cellnum[i].d_diff[3]=0;		}	}		//Euler method---------	imax=Cellnum.size();	for (i=0; i<imax; i++) {		Cellnum[i].diff[0]=Cellnum[i].diff[0]+dt_D*Cellnum[i].d_diff[0];		Cellnum[i].diff[1]=Cellnum[i].diff[1]+dt_D*Cellnum[i].d_diff[1];        Cellnum[i].diff[2]=Cellnum[i].diff[2]+dt_D*Cellnum[i].d_diff[2];		Cellnum[i].diff[3]=Cellnum[i].diff[3]+dt_D*Cellnum[i].d_diff[3];	}} //Diffusion closevoid Tissue::Division(int p) {//if (p<qmax*tmax*0.98) {	imax_d=Cellnum.size();	imax=Cellnum.size();	int shape_vertex_d;	int division_same; //Treatment for cell divisions at the same time	division_same=0;	for (i=0; i<imax_d; i++) {      //division code if (Cellnum[i].time_division==p) {	 	 shape_vertex_d=Cellnum[i].GroupVertex.size();	 if (shape_vertex_d<=4 || Cellnum[i].Area<Area_ave1*0.25 ){		 Cellnum[i].time_division=p+1000;	 }	 	 if (shape_vertex_d>4 && Cellnum[i].Area>=Area_ave1*0.25){				cout << p <<"	"<< i << "	"<<Cellnum[i].Long_axis << "	"<<Cellnum[i].Short_axis <<endl;			double theta,r,aa,bb,ramuda1,gra1,gra2,heiho;			int vertex_max=0;			int edge_max=0;			int j1,hmax;			int i_2[2];			int j_2=0;			double ab[3];			int j_cross[2];			int flag=0;	 			Cellnum[i].GroupVertex_divi.assign(Cellnum[i].GroupVertex.begin(), Cellnum[i].GroupVertex.end());			Cellnum[i].GroupEdge_divi.assign(Cellnum[i].GroupEdge.begin(), Cellnum[i].GroupEdge.end());									//Preparation of the crossing judgment and determination of the plane of division			ramuda1=0.5*((Cellnum[i].Mxx+Cellnum[i].Myy)+sqrt((Cellnum[i].Mxx+Cellnum[i].Myy)*(Cellnum[i].Mxx+Cellnum[i].Myy)-4*(Cellnum[i].Mxx*Cellnum[i].Myy-Cellnum[i].Mxy*Cellnum[i].Mxy)));			gra1=(Cellnum[i].Mxx-ramuda1)/Cellnum[i].Mxy;			gra2=Cellnum[i].Mxy/(Cellnum[i].Myy-ramuda1);			theta=atan(gra1);            			theta=theta+M_PI*(0.1-0.2*drand48());//Angle of division direction						Cellnum[i].cent_dr[0]=cos(theta);			Cellnum[i].cent_dr[1]=sin(theta);						//cell divisions at the same time			if(division_same>0){				//Coordinate move; center of gravity is origin point					//hosei					jmax=Cellnum[i].GroupVertex.size();					for (j=0; j<jmax; j++) {						Cellnum[i].GroupVertex_h[j%jmax].coordinate_h[0]=Vertices[Cellnum[i].GroupVertex[j%jmax]].coordinate[0]-Cellnum[i].centroid[0];						Cellnum[i].GroupVertex_h[j%jmax].coordinate_h[1]=Vertices[Cellnum[i].GroupVertex[j%jmax]].coordinate[1]-Cellnum[i].centroid[1];						Cellnum[i].GroupVertex_h[j%jmax].coordinate_h[2]=Vertices[Cellnum[i].GroupVertex[j%jmax]].coordinate[2]-Cellnum[i].centroid[2];					}				//3D->2D					jmax=Cellnum[i].GroupVertex.size();					for (j=0; j<jmax; j++){						//z-axis angle transformation						Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate_z[0]=Cellnum[i].GroupVertex_h[j].coordinate_h[0]*cos(Cellnum[i].sita) +Cellnum[i].GroupVertex_h[j].coordinate_h[1]*sin(Cellnum[i].sita);						Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate_z[1]=-Cellnum[i].GroupVertex_h[j].coordinate_h[0]*sin(Cellnum[i].sita) +Cellnum[i].GroupVertex_h[j].coordinate_h[1]*cos(Cellnum[i].sita);						Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate_z[2]=Cellnum[i].GroupVertex_h[j].coordinate_h[2];												//y-axis angle transformation						Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[0]=Cellnum[i].GroupVertex_h[j].xy_coordinate_z[0]*cos(Cellnum[i].fai) -Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate_z[2]*sin(Cellnum[i].fai);						Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[1]=Cellnum[i].GroupVertex_h[j].xy_coordinate_z[1];						Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[2]=Cellnum[i].GroupVertex_h[j].xy_coordinate_z[0]*sin(Cellnum[i].fai) +Cellnum[i].GroupVertex_h[j].xy_coordinate_z[2]*cos(Cellnum[i].fai);					}				cout<<"same"<<endl;				}	 			//the crossing judgment			jmax=Cellnum[i].GroupVertex_h.size();			for (j=0; j<jmax; j++) {				aa=Cellnum[i].cent_dr[0]*(0/*Cellnum[i].centroid[1]*/-Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[1])				-Cellnum[i].cent_dr[1]*(0/*Cellnum[i].centroid[0]*/-Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[0]);				bb=Cellnum[i].cent_dr[0]*(Cellnum[i].GroupVertex_h[(j+1)%jmax].xy_coordinate[1]-Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[1])				-Cellnum[i].cent_dr[1]*(Cellnum[i].GroupVertex_h[(j+1)%jmax].xy_coordinate[0]-Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[0]);				r=aa/bb;								if (r>0&&r<1) {					j1=j;					ab[0]=Cellnum[i].GroupVertex_h[(j+1)%jmax].xy_coordinate[0]-Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[0];			        ab[1]=Cellnum[i].GroupVertex_h[(j+1)%jmax].xy_coordinate[1]-Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[1];					ab[2]=Cellnum[i].GroupVertex_h[(j+1)%jmax].xy_coordinate[2]-Cellnum[i].GroupVertex_h[j%jmax].xy_coordinate[2];										vertex_max=Vertices.size();					Vertices.push_back(Vertex());										//2D                    Vertices[vertex_max].xy_coordinate[0]=Cellnum[i].GroupVertex_h[j].xy_coordinate[0]+r*ab[0];                    Vertices[vertex_max].xy_coordinate[1]=Cellnum[i].GroupVertex_h[j].xy_coordinate[1]+r*ab[1];					Vertices[vertex_max].xy_coordinate[2]=0;					//2D->3D					//y-axis angle transformation					Vertices[vertex_max].coordinate_hy[0]=Vertices[vertex_max].xy_coordinate[0]*cos(Cellnum[i].fai) +Vertices[vertex_max].xy_coordinate[2]*sin(Cellnum[i].fai);					Vertices[vertex_max].coordinate_hy[1]=Vertices[vertex_max].xy_coordinate[1];					Vertices[vertex_max].coordinate_hy[2]=-Vertices[vertex_max].xy_coordinate[0]*sin(Cellnum[i].fai) +Vertices[vertex_max].xy_coordinate[2]*cos(Cellnum[i].fai);					//z-axis angle transformation					Vertices[vertex_max].coordinate_h[0]=Vertices[vertex_max].coordinate_hy[0]*cos(Cellnum[i].sita) -Vertices[vertex_max].coordinate_hy[1]*sin(Cellnum[i].sita);					Vertices[vertex_max].coordinate_h[1]=Vertices[vertex_max].coordinate_hy[0]*sin(Cellnum[i].sita) +Vertices[vertex_max].coordinate_hy[1]*cos(Cellnum[i].sita);					Vertices[vertex_max].coordinate_h[2]=Vertices[vertex_max].coordinate_hy[2];					//move the center of gravity to the position in the origin coordinates					Vertices[vertex_max].coordinate[0]=Vertices[vertex_max].coordinate_h[0]+Cellnum[i].centroid[0];					Vertices[vertex_max].coordinate[1]=Vertices[vertex_max].coordinate_h[1]+Cellnum[i].centroid[1];					Vertices[vertex_max].coordinate[2]=Vertices[vertex_max].coordinate_h[2]+Cellnum[i].centroid[2];										//vertex parameter					Vertices[vertex_max].k_ball=k_4;					Vertices[vertex_max].vertex_r0=tissue_r0;										//cout << Vertices[vertex_max].coordinate[0]<< " " <<Vertices[vertex_max].coordinate[1] << endl;										hmax=Cellnum[i].GroupVertex_divi.size();					Cellnum[i].GroupVertex_divi.push_back(int());					for (int h=hmax-1; h>j1+flag; h--) {						Cellnum[i].GroupVertex_divi[(h+1)]=Cellnum[i].GroupVertex_divi[h];					}										Cellnum[i].GroupVertex_divi[j1+flag+1]=vertex_max;					j_cross[flag]=j1;										for (int k=0; k<2; k++) {						if (Edge[Cellnum[i].GroupEdge[(j1)%jmax]].Edge_Area[k]!=i) {							i_2[flag]=Edge[Cellnum[i].GroupEdge[(j1)%jmax]].Edge_Area[k];						}					}									hmax=Cellnum[i_2[flag]].GroupVertex.size();					for (int h=0; h<hmax; h++) {						if (Cellnum[i].GroupVertex[j1%jmax]==Cellnum[i_2[flag]].GroupVertex[h]) {							j_2=h;						}					}					//vertex adding to cell					Cellnum[i_2[flag]].GroupVertex.push_back(int());					for (int h=hmax-1; h>j_2-1; h--) {						Cellnum[i_2[flag]].GroupVertex[(h+1)]=Cellnum[i_2[flag]].GroupVertex[h];					}					Cellnum[i_2[flag]].GroupVertex[j_2]=vertex_max;										Cellnum[i_2[flag]].GroupVertex_h.push_back(Vertex());//vertex adding to cell										edge_max=Edge.size();					Edge.push_back(Vertex());								hmax=Cellnum[i_2[flag]].GroupEdge.size();					Cellnum[i_2[flag]].GroupEdge.push_back(int());//cell edge add					Cellnum[i_2[flag]].GroupEdge_h.push_back(Vertex());//cell edge add					for (int h=hmax-1; h>j_2-1; h--) {						Cellnum[i_2[flag]].GroupEdge[(h+1)]=Cellnum[i_2[flag]].GroupEdge[h];					}										Cellnum[i_2[flag]].GroupEdge[j_2]=edge_max;										flag+=1;				}			}			imax=Cellnum.size();			edge_max=Edge.size();			Edge[edge_max-2].Edge_Area[0]=i_2[0];			Edge[edge_max-2].Edge_Area[1]=i;			Edge[edge_max-2].Edge_Vertex[0]=vertex_max-1;			Edge[edge_max-2].Edge_Vertex[1]=Cellnum[i].GroupVertex_divi[j_cross[0]];			Edge[edge_max-2].T1_flag=0;			Edge[edge_max-1].Edge_Area[0]=imax;			Edge[edge_max-1].Edge_Area[1]=i_2[1];			Edge[edge_max-1].Edge_Vertex[0]=vertex_max;			Edge[edge_max-1].Edge_Vertex[1]=Cellnum[i].GroupVertex_divi[j_cross[1]+1];			Edge[edge_max-1].T1_flag=0;			Edge.push_back(Vertex());			Edge[edge_max].Edge_Area[0]=i;			Edge[edge_max].Edge_Area[1]=imax;			Edge[edge_max].Edge_Vertex[0]=vertex_max-1;			Edge[edge_max].Edge_Vertex[1]=vertex_max;			Edge[edge_max].T1_flag=0;									//cross point check, add 2 vertex point			if (flag==2) {				//new cell				Cellnum.push_back(Cell());//element add				imax=Cellnum.size();				for (j=j_cross[0]+1; j<(j_cross[1]+1)+2; j++) {					Cellnum[imax-1].GroupVertex.push_back(Cellnum[i].GroupVertex_divi[j]);				}							//parameter				Cellnum[imax-1].cell_type=Cellnum[i].cell_type;				Cellnum[imax-1].cell_lineage=Cellnum[i].cell_lineage;				Cellnum[imax-1].division_count=Cellnum[i].division_count;				Cellnum[imax-1].k_area=Cellnum[i].k_area;				Cellnum[imax-1].k_peri=Cellnum[i].k_peri;				Cellnum[imax-1].k_tiss=Cellnum[i].k_tiss;				Cellnum[imax-1].cell_rand=rand_normal(1,0.75);			//area                Cellnum[imax-1].Area0_00=Cellnum[i].Area0_00;				Cellnum[i].Area0_0=Cellnum[i].Area0*0.6;				Cellnum[imax-1].Area0_0=Cellnum[i].Area0_0;								Cellnum[i].Area0=Cellnum[i].Area0*0.6;//0.6                Cellnum[imax-1].Area0=Cellnum[i].Area0;				Cellnum[i].Perimeter0=Perimeter_ave1*0.5;//0.6                Cellnum[imax-1].Perimeter0=Cellnum[i].Perimeter0;								Cellnum[i].axis_division=-2500;				Cellnum[imax-1].axis_division=-2500;								//concerned to cell polarity				Cellnum[imax-1].tiss_cent_dr[0]=Cellnum[i].tiss_cent_dr[0];				Cellnum[imax-1].tiss_cent_dr[1]=Cellnum[i].tiss_cent_dr[1];				Cellnum[imax-1].tiss_cent_dr[2]=Cellnum[i].tiss_cent_dr[2];								// diffusion				//Cellnum[i].diff[0]=Cellnum[i].diff[0];				//Cellnum[i].diff[1]=Cellnum[i].diff[1];				//Cellnum[i].diff[2]=Cellnum[i].diff[2];				//Cellnum[i].diff[3]=Cellnum[i].diff[3];				Cellnum[imax-1].diff[0]=Cellnum[i].diff[0];				Cellnum[imax-1].diff[1]=Cellnum[i].diff[1];				Cellnum[imax-1].diff[2]=Cellnum[i].diff[2];				Cellnum[imax-1].diff[3]=Cellnum[i].diff[3];				Cellnum[imax-1].D_0=Cellnum[i].D_0;				Cellnum[imax-1].D_1=Cellnum[i].D_1;				Cellnum[imax-1].D_2=Cellnum[i].D_2;				Cellnum[imax-1].D_3=Cellnum[i].D_3;				Cellnum[imax-1].S_0=Cellnum[i].S_0;				Cellnum[imax-1].S_1=Cellnum[i].S_1;				Cellnum[imax-1].S_2=Cellnum[i].S_2;				Cellnum[imax-1].S_3=Cellnum[i].S_3;				Cellnum[imax-1].P_0=Cellnum[i].P_0;				Cellnum[imax-1].P_1=Cellnum[i].P_1;				Cellnum[imax-1].P_2=Cellnum[i].P_2;				Cellnum[imax-1].P_3=Cellnum[i].P_3;				Cellnum[imax-1].B_0=Cellnum[i].B_0;				Cellnum[imax-1].B_1=Cellnum[i].B_1;				Cellnum[imax-1].B_2=Cellnum[i].B_2;				Cellnum[imax-1].B_3=Cellnum[i].B_3;												jmax=Cellnum[imax-1].GroupVertex.size();				for (j=0; j<jmax; j++) {					Cellnum[imax-1].GroupVertex_h.push_back(Vertex());				}								edge_max=Edge.size();				for (j=j_cross[0]; j<(j_cross[1]); j++) {					Cellnum[imax-1].GroupEdge.push_back(Cellnum[i].GroupEdge_divi[j]);				}				Cellnum[imax-1].GroupEdge.push_back(edge_max-2);				Cellnum[imax-1].GroupEdge.push_back(edge_max-1);								jmax=Cellnum[imax-1].GroupEdge.size();				for (j=0; j<jmax; j++) {					Cellnum[imax-1].GroupEdge_h.push_back(Vertex());				}								int i_divi=0;				int jmax_new;				int k;				int han,han1,han2;//judgement factor				jmax=Cellnum[i].GroupVertex_divi.size();				jmax_new=Cellnum[imax-1].GroupVertex.size();				han=jmax+2-jmax_new;				han1=Cellnum[i].GroupVertex.size()-han;				han2=han-Cellnum[i].GroupVertex.size();				if (han1>0) {					for (k=0; k<han1; k++) {						Cellnum[i].GroupVertex.pop_back();						Cellnum[i].GroupEdge.pop_back();						Cellnum[i].GroupVertex_h.pop_back();						Cellnum[i].GroupEdge_h.pop_back();					}				}				if (han2>0) {					for (k=0; k<han2; k++) {						Cellnum[i].GroupVertex.push_back(int());						Cellnum[i].GroupEdge.push_back(int());						Cellnum[i].GroupVertex_h.push_back(Vertex());						Cellnum[i].GroupEdge_h.push_back(Vertex());					}				}								for (j=0; j<j_cross[0]+2; j++) {					Cellnum[i].GroupVertex[i_divi]=Cellnum[i].GroupVertex_divi[j];					i_divi+=1;				}				for (j=(j_cross[1]+1)+1; j<jmax; j++) {					Cellnum[i].GroupVertex[i_divi]=Cellnum[i].GroupVertex_divi[j];					i_divi+=1;				}								jmax=Cellnum[i].GroupEdge_divi.size();				i_divi=0;				for (j=0; j<j_cross[0]; j++) {					Cellnum[i].GroupEdge[i_divi]=Cellnum[i].GroupEdge_divi[j];					i_divi+=1;				}				Cellnum[i].GroupEdge[i_divi]=edge_max-3;				i_divi+=1;				Cellnum[i].GroupEdge[i_divi]=edge_max-1;				i_divi+=1;				for (j=j_cross[1]; j<jmax; j++) {					Cellnum[i].GroupEdge[i_divi]=Cellnum[i].GroupEdge_divi[j];					i_divi+=1;				}			}						//vertex			imax=Cellnum.size();			vertex_max=Vertices.size();			jmax=Cellnum[i].GroupVertex_divi.size();			Vertices[vertex_max-2].NeighborCell.push_back(imax-1);			Vertices[vertex_max-2].NeighborCell.push_back(i);			Vertices[vertex_max-2].NeighborCell.push_back(i_2[0]);			Vertices[vertex_max-2].NeighborVertex.push_back(Cellnum[i].GroupVertex_divi[j_cross[0]%jmax]);			Vertices[vertex_max-2].NeighborVertex.push_back(Cellnum[i].GroupVertex_divi[(j_cross[0]+2)%jmax]);			Vertices[vertex_max-2].NeighborVertex.push_back(vertex_max-1);			Vertices[vertex_max-1].NeighborCell.push_back(i);			Vertices[vertex_max-1].NeighborCell.push_back(imax-1);			Vertices[vertex_max-1].NeighborCell.push_back(i_2[1]);			Vertices[vertex_max-1].NeighborVertex.push_back(Cellnum[i].GroupVertex_divi[(j_cross[1]+1)%jmax]);			Vertices[vertex_max-1].NeighborVertex.push_back(Cellnum[i].GroupVertex_divi[(j_cross[1]+1+2)%jmax]);			Vertices[vertex_max-1].NeighborVertex.push_back(vertex_max-2);			jmax=Cellnum[i].GroupVertex_divi.size();			for (k=0; k<3; k++) {				if (Vertices[Cellnum[i].GroupVertex_divi[j_cross[0]%jmax]].NeighborVertex[k]==Cellnum[i].GroupVertex_divi[(j_cross[0]+2)%jmax]) {					Vertices[Cellnum[i].GroupVertex_divi[j_cross[0]%jmax]].NeighborVertex[k]=vertex_max-2;				}			}			for (j=j_cross[0]+2; j<(j_cross[1]+1)+1; j++) {				for (k=0; k<3; k++) {					if (Vertices[Cellnum[i].GroupVertex_divi[j%jmax]].NeighborCell[k]==i) {						Vertices[Cellnum[i].GroupVertex_divi[j%jmax]].NeighborCell[k]=imax-1;					}				}			}						for (k=0; k<3; k++) {				if (Vertices[Cellnum[i].GroupVertex_divi[(j_cross[0]+2)%jmax]].NeighborVertex[k]==Cellnum[i].GroupVertex_divi[j_cross[0]%jmax]) {					Vertices[Cellnum[i].GroupVertex_divi[(j_cross[0]+2)%jmax]].NeighborVertex[k]=vertex_max-2;				}			}			for (k=0; k<3; k++) {				if (Vertices[Cellnum[i].GroupVertex_divi[(j_cross[1]+1)%jmax]].NeighborVertex[k]==Cellnum[i].GroupVertex_divi[(j_cross[1]+1+2)%jmax]) {					Vertices[Cellnum[i].GroupVertex_divi[(j_cross[1]+1)%jmax]].NeighborVertex[k]=vertex_max-1;				}			}			for (k=0; k<3; k++) {				if (Vertices[Cellnum[i].GroupVertex_divi[(j_cross[1]+1+2)%jmax]].NeighborVertex[k]==Cellnum[i].GroupVertex_divi[(j_cross[1]+1)%jmax]) {					Vertices[Cellnum[i].GroupVertex_divi[(j_cross[1]+1+2)%jmax]].NeighborVertex[k]=vertex_max-1;				}			}						//Edge			jmax=Cellnum[i].GroupVertex_divi.size();			hmax=Cellnum[i].GroupEdge_divi.size();			for (k=0; k<2; k++) {				if (Edge[Cellnum[i].GroupEdge_divi[j_cross[0]%hmax]].Edge_Vertex[k]==Cellnum[i].GroupVertex_divi[(j_cross[0])%jmax]) {					Edge[Cellnum[i].GroupEdge_divi[j_cross[0]%hmax]].Edge_Vertex[k]=vertex_max-2;				}			}			for (k=0; k<2; k++) {				if (Edge[Cellnum[i].GroupEdge_divi[(j_cross[1])%hmax]].Edge_Vertex[k]==Cellnum[i].GroupVertex_divi[(j_cross[1]+1)%jmax]) {					Edge[Cellnum[i].GroupEdge_divi[(j_cross[1])%hmax]].Edge_Vertex[k]=vertex_max-1;				}			}			for (j=j_cross[0]; j<j_cross[1]; j++) {				for (k=0; k<2; k++) {					if (Edge[Cellnum[i].GroupEdge_divi[j%hmax]].Edge_Area[k]==i) {						Edge[Cellnum[i].GroupEdge_divi[j%hmax]].Edge_Area[k]=imax-1;					}				}			}	 									//division time			//Cellnum[i].time_division=-1;			//Cellnum[imax-1].time_division=-1;			Cellnum[i].time_division=p+int(qmax*0.5*rand_normal(1,0.1));			Cellnum[imax-1].time_division=p+int(qmax*0.5*rand_normal(1,0.1));			/*if (p<9000) { //time division            Cellnum[i].time_division=p+int(2500+2000*drand48());//int(5000+300*drand48());    //3500			Cellnum[imax-1].time_division=p+int(2500+2000*drand48());//int(5000+300*drand48());//3500			}*/                        /*if (p>qmax*tmax*0.9) {                Cellnum[i].time_division=-1;                Cellnum[imax-1].time_division=-1;            }*/            				 Cellnum[i].division_count+=1;				 Cellnum[imax-1].division_count=Cellnum[i].division_count;	 				//}//division_count				division_same+=1;				}//vertex_num			 }//division time p		}//cell number i	//}//division stop}//division closevoid Tissue::Growth(int p) {	//cell area growth        imax=Cellnum.size();        for (i=0; i<imax; i++){			/*if (Cellnum[i].cell_type==1 ||Cellnum[i].cell_type==3 ||Cellnum[i].cell_type==5){				if (Cellnum[i].Area0<=0.5*Cellnum[i].Area0_0){                        Cellnum[i].Area0+=0.0002*Cellnum[i].Area0_0;//0.00005                    }				if (Cellnum[i].Area0>0.5*Cellnum[i].Area0_0){ //Cellnum[i].cell_rand                    Cellnum[i].Area0-=0.0002*Cellnum[i].Area0_0;//0.00005                }                            } //cell type*/			            if (p<qmax*0.75 && p>qmax*0.05){//p<20000            if (Cellnum[i].cell_type==6){				double celltype_flag;				celltype_flag=0;				jmax=Cellnum[i].GroupEdge.size();				for (j=0; j<jmax; j++){					for (k=0; k<2; k++){						if(Cellnum[Edge[Cellnum[i].GroupEdge[j%jmax]].Edge_Area[k]].cell_type==1|| Cellnum[Edge[Cellnum[i].GroupEdge[j%jmax]].Edge_Area[k]].cell_type==3){							celltype_flag+=1;						}					}                    for (k=0; k<2; k++){                        if(Cellnum[Edge[Cellnum[i].GroupEdge[j%jmax]].Edge_Area[k]].cell_type==5){                            celltype_flag+=-1;                        }                    }				}					if (celltype_flag==0){						Cellnum[i].Area0+=0.004*Area_ave1;//0.00045						Cellnum[i].Perimeter0=Cellnum[i].Perimeter*0.25; //0.5					}					if (celltype_flag>=1){                       // if(flag_ogi==0){						Cellnum[i].Area0+=0.004*Area_ave1;//0.0005 0.00075						Cellnum[i].Perimeter0=Cellnum[i].Perimeter*0.25; //0.5						//Cellnum[i].k_area=k_1*0.3;                       // }					}            } //cell type			} //time						if (Cellnum[i].Area0<0){					Cellnum[i].Area0=0;//0.0002			}			        } //cell number i	//-------------		//cell edge parameter after T1	imax=Cellnum.size();	for (i=0; i<imax; i++) {		if(Cellnum[i].cell_type==5 || Cellnum[i].cell_type==1 || Cellnum[i].cell_type==3){		jmax=Cellnum[i].GroupEdge.size();		for (j=0; j<jmax; j++){			Cellnum[i].GroupEdge_h[j%jmax].k_api=k_3*1;			if(Edge[Cellnum[i].GroupEdge[j%jmax]].T1_flag<0){//Edge[i].T1_flag=-qmax*0.005				Cellnum[i].GroupEdge_h[j%jmax].k_api=k_3*0.25;			}		}		}	}			   	//developmental stage	if (p==0){		cout << p <<endl;		flag_ogi=0;		}	if (p==0){	time_step=1;	}		if (p==qmax*tmax*0.25 ||  p==qmax*tmax*0.5 || p==qmax*tmax*0.75){	cout << p <<endl;		if (p==qmax*tmax*0.5) {//20000			flag_ogi=1;		}	}        /*if (p==15000){        cout << p <<endl;        imax=Cellnum.size();        for (i=0; i<imax; i++) {            if (Cellnum[i].cell_type==1 && Cellnum[i].centroid[0]<Cellnum[tail_boundary].centroid[0]) {                Cellnum[i].cell_type=5;            }        }    }*/		//bounday edge parameter			   imax=Cellnum.size();				   for (i=0; i<imax; i++) {					   if(Cellnum[i].cell_type==1 || Cellnum[i].cell_type==3){					   jmax=Cellnum[i].GroupEdge.size();					   for (j=0; j<jmax; j++){						   for (k=0; k<2; k++) {						   if(Cellnum[Edge[Cellnum[i].GroupEdge[j]].Edge_Area[k]].cell_type==6){								   Cellnum[i].GroupEdge_h[j].k_api=k_3*40;						   }						   }					   }					   }				   }			imax=Cellnum.size();		for (i=0; i<imax; i++) {			if(Cellnum[i].cell_type==5 ){				jmax=Cellnum[i].GroupEdge.size();				for (j=0; j<jmax; j++){					for (k=0; k<2; k++) {						if(Cellnum[Edge[Cellnum[i].GroupEdge[j]].Edge_Area[k]].cell_type==6){							Cellnum[i].GroupEdge_h[j].k_api=k_3*40;						}					}				}			}		}						imax=Cellnum.size();					  for (i=0; i<imax; i++) {						  if(Cellnum[i].cell_type==3 ){//|| Cellnum[i].cell_type==1 || Cellnum[i].cell_type==5						  jmax=Cellnum[i].GroupEdge.size();						  for (j=0; j<jmax; j++){							  for (k=0; k<2; k++) {							  if(Cellnum[Edge[Cellnum[i].GroupEdge[j]].Edge_Area[k]].cell_type==2){									  Cellnum[i].GroupEdge_h[j].k_api=k_3*40;//40							  }							  }						  }						  }					  }        imax=Cellnum.size();      for (i=0; i<imax; i++) {          if(Cellnum[i].cell_type==1 || Cellnum[i].cell_type==5){//|| Cellnum[i].cell_type==1 || Cellnum[i].cell_type==5          jmax=Cellnum[i].GroupEdge.size();          for (j=0; j<jmax; j++){              for (k=0; k<2; k++) {              if(Cellnum[Edge[Cellnum[i].GroupEdge[j]].Edge_Area[k]].cell_type==2){                      Cellnum[i].GroupEdge_h[j].k_api=k_3*40;//40              }              }          }          }      }    		imax=Cellnum.size();	for (i=0; i<imax; i++) {		if(Cellnum[i].cell_type==6){		jmax=Cellnum[i].GroupEdge.size();		for (j=0; j<jmax; j++){			for (k=0; k<2; k++) {			if(Cellnum[Edge[Cellnum[i].GroupEdge[j]].Edge_Area[k]].cell_type==2){					Cellnum[i].GroupEdge_h[j].k_api=k_3*5;			}			}		}		}	}    	//diffusion	/*imax=Cellnum.size();	for (i=0; i<imax; i++) {		if(Cellnum[i].cell_type==1){			jmax=Cellnum[i].GroupEdge.size();			for (j=0; j<jmax; j++) {				if (Cellnum[Edge[Cellnum[i].GroupEdge[j]].Edge_Area[0]].cell_type==3 || Cellnum[Edge[Cellnum[i].GroupEdge[j]].Edge_Area[1]].cell_type==3) {					Cellnum[i].diff[0]=hh*1;				}			}		}	}*/		/*if (p==10000){	imax=Cellnum.size();	for (i=0; i<imax; i++) {		if(Cellnum[i].cell_type==5 && Cellnum[i].centroid[0]<=-260){			Cellnum[i].diff[0]=hh*1;		}	}	}*/		/*imax=Cellnum.size();	for (i=0; i<imax; i++) {		if (Cellnum[i].cell_type==1 || Cellnum[i].cell_type==3 || Cellnum[i].cell_type==5) {		jmax=Cellnum[i].GroupEdge.size();		for (j=0; j<jmax; j++) {		for (k=0; k<2; k++) {			if (Edge[Cellnum[i].GroupEdge[j%jmax]].Edge_Area[k]!= i && (Cellnum[Edge[Cellnum[i].GroupEdge[j%jmax]].Edge_Area[k]].cell_type!=2 || Cellnum[Edge[Cellnum[i].GroupEdge[j]].Edge_Area[k]].cell_type!=6)) {				if (Cellnum[Edge[Cellnum[i].GroupEdge[j%jmax]].Edge_Area[k]].diff[1]-Cellnum[Edge[Cellnum[i].GroupEdge[j%jmax]].Edge_Area[k]].diff[0]>0 &&					Cellnum[i].diff[0]-Cellnum[i].diff[1]>0) {					Cellnum[i].GroupEdge_h[j%jmax].k_api=k_3*50;				}//if				}//if		} //for		} //for		}//if	} //for*/	} //growth close//cell rearrengement, T1 transitionvoid Tissue::T1_cell() {	int vertex1,vertex2,vertex3,vertex4;	double length_edge;	int cell01,cell02;	int cell1,cell2;	int cell3,cell4;	int j,j1,j2,j3,j4,jmax,imax,hmax;		imax=Edge.size();	for (i=0; i<imax; i++) {		if (Edge[i].T1_flag<1) {				Edge[i].T1_flag+=1;		}				vertex1=Edge[i].Edge_Vertex[0];		vertex2=Edge[i].Edge_Vertex[1];					length_edge=sqrt((Vertices[vertex1].coordinate[0]-Vertices[vertex2].coordinate[0])						 *(Vertices[vertex1].coordinate[0]-Vertices[vertex2].coordinate[0])						 +(Vertices[vertex1].coordinate[1]-Vertices[vertex2].coordinate[1])						 *(Vertices[vertex1].coordinate[1]-Vertices[vertex2].coordinate[1])						 +(Vertices[vertex1].coordinate[2]-Vertices[vertex2].coordinate[2])						 *(Vertices[vertex1].coordinate[2]-Vertices[vertex2].coordinate[2]));				//length		if (length_edge<2.5) {//1				Edge[i].T1_flag+=1;			/*for (j=0; j<2; j++){				if(Cellnum[Edge[i].Edge_Area[j]].cell_type==2){								Edge[i].T1_flag+=-1;						}			}*/		}				for (j=0; j<2; j++){			if(Cellnum[Edge[i].Edge_Area[j]].cell_type==3 && Cellnum[Edge[i].Edge_Area[(j+1)%2]].cell_type==2 && length_edge<3){							Edge[i].T1_flag+=1;					}		}        for (j=0; j<2; j++){            if(Cellnum[Edge[i].Edge_Area[j]].cell_type==1 && Cellnum[Edge[i].Edge_Area[(j+1)%2]].cell_type==2 && length_edge<3){                            Edge[i].T1_flag+=1;                    }        }        		for (j=0; j<2; j++){			if(Cellnum[Edge[i].Edge_Area[j]].cell_type==1 && Cellnum[Edge[i].Edge_Area[(j+1)%2]].cell_type==6 && length_edge<3){							Edge[i].T1_flag+=1;					}		}		for (j=0; j<2; j++){			if(Cellnum[Edge[i].Edge_Area[j]].cell_type==3 && Cellnum[Edge[i].Edge_Area[(j+1)%2]].cell_type==6 && length_edge<3){							Edge[i].T1_flag+=1;					}		}		for (j=0; j<2; j++){			if(Cellnum[Edge[i].Edge_Area[j]].cell_type==5 && Cellnum[Edge[i].Edge_Area[(j+1)%2]].cell_type==6 && length_edge<3){							Edge[i].T1_flag+=1;					}		}				/*for (j=0; j<2; j++){			if(Cellnum[Edge[i].Edge_Area[j]].cell_type==6 && Cellnum[Edge[i].Edge_Area[(j+1)%2]].cell_type==2 && length_edge<3){							Edge[i].T1_flag+=-1;					}		}*/			if (Edge[i].T1_flag>qmax*0.005) {//0.006		cell01=Edge[i].Edge_Area[0];		cell02=Edge[i].Edge_Area[1];				int shape_vertex1, shape_vertex2;		shape_vertex1=Cellnum[cell01].GroupVertex.size();		shape_vertex2=Cellnum[cell02].GroupVertex.size();		if (shape_vertex1>=4 && shape_vertex2>=4){					for (int k=0; k<3; k++) {				if (Vertices[vertex1].NeighborVertex[k]==vertex2) {					vertex3=Vertices[vertex1].NeighborVertex[(k+1)%3];						 }			}			for (int k=0; k<3; k++) {				if (Vertices[vertex2].NeighborVertex[k]==vertex1) {					vertex4=Vertices[vertex2].NeighborVertex[(k+1)%3];				}			}						//cell1 cell2			jmax=Cellnum[cell01].GroupVertex.size();			for (j=0; j<jmax; j++) {				if (Cellnum[cell01].GroupVertex[j]==vertex3) {					cell1=cell01;				}				if (Cellnum[cell01].GroupVertex[j]==vertex4) {					cell2=cell01;				}			}			jmax=Cellnum[cell02].GroupVertex.size();			for (j=0; j<jmax; j++) {				if (Cellnum[cell02].GroupVertex[j]==vertex3) {					cell1=cell02;				}				if (Cellnum[cell02].GroupVertex[j]==vertex4) {					cell2=cell02;				}			}						Cellnum[cell1].GroupVertex_T1.assign(Cellnum[cell1].GroupVertex.begin(), Cellnum[cell1].GroupVertex.end());			Cellnum[cell1].GroupEdge_T1.assign(Cellnum[cell1].GroupEdge.begin(), Cellnum[cell1].GroupEdge.end());			Cellnum[cell2].GroupVertex_T1.assign(Cellnum[cell2].GroupVertex.begin(), Cellnum[cell2].GroupVertex.end());			Cellnum[cell2].GroupEdge_T1.assign(Cellnum[cell2].GroupEdge.begin(), Cellnum[cell2].GroupEdge.end());			//cell1			jmax=Cellnum[cell1].GroupVertex.size();			for (j=0; j<jmax; j++) {				if (Cellnum[cell1].GroupVertex[j]==vertex1) {					j1=j;				}			}			for (j=jmax-1; j>j1; j--) {				Cellnum[cell1].GroupVertex[j-1]=Cellnum[cell1].GroupVertex_T1[j];			}			for (j=jmax-1; j>j1; j--) {				Cellnum[cell1].GroupEdge[j-1]=Cellnum[cell1].GroupEdge_T1[j];			}			Cellnum[cell1].GroupVertex.pop_back();			Cellnum[cell1].GroupEdge.pop_back();			Cellnum[cell1].GroupVertex_h.pop_back();			Cellnum[cell1].GroupEdge_h.pop_back();						//cell2			jmax=Cellnum[cell2].GroupVertex.size();			for (j=0; j<jmax; j++) {				if (Cellnum[cell2].GroupVertex[j]==vertex2) {					j2=j;				}			}			for (j=jmax-1; j>j2; j--) {				Cellnum[cell2].GroupVertex[j-1]=Cellnum[cell2].GroupVertex_T1[j];			}			for (j=jmax-1; j>j2; j--) {				Cellnum[cell2].GroupEdge[j-1]=Cellnum[cell2].GroupEdge_T1[j];			}			Cellnum[cell2].GroupVertex.pop_back();			Cellnum[cell2].GroupEdge.pop_back();			Cellnum[cell2].GroupVertex_h.pop_back();			Cellnum[cell2].GroupEdge_h.pop_back();						//cell3 cell4			for (int k=0; k<3; k++) {				if (Vertices[vertex1].NeighborCell[k]!=cell1 && Vertices[vertex1].NeighborCell[k]!=cell2) {					cell3=Vertices[vertex1].NeighborCell[k];				}			}			for (int k=0; k<3; k++) {				if (Vertices[vertex2].NeighborCell[k]!=cell1 && Vertices[vertex2].NeighborCell[k]!=cell2) {					cell4=Vertices[vertex2].NeighborCell[k];				}			}						Cellnum[cell3].GroupVertex_T1.assign(Cellnum[cell3].GroupVertex.begin(), Cellnum[cell3].GroupVertex.end());			Cellnum[cell3].GroupEdge_T1.assign(Cellnum[cell3].GroupEdge.begin(), Cellnum[cell3].GroupEdge.end());			Cellnum[cell4].GroupVertex_T1.assign(Cellnum[cell4].GroupVertex.begin(), Cellnum[cell4].GroupVertex.end());			Cellnum[cell4].GroupEdge_T1.assign(Cellnum[cell4].GroupEdge.begin(), Cellnum[cell4].GroupEdge.end());				//cell3			jmax=Cellnum[cell3].GroupVertex.size();			Cellnum[cell3].GroupVertex.push_back(int());			Cellnum[cell3].GroupEdge.push_back(int());			Cellnum[cell3].GroupVertex_h.push_back(Vertex());			Cellnum[cell3].GroupEdge_h.push_back(Vertex());						for (int j=0; j<jmax; j++) {				if (Cellnum[cell3].GroupVertex[j]==vertex1) {					j3=j;				}			}			for (int j=jmax-1; j>j3; j--) {				Cellnum[cell3].GroupVertex[j+1]=Cellnum[cell3].GroupVertex_T1[j];			}			for (int j=jmax-1; j>j3-1; j--) {				Cellnum[cell3].GroupEdge[j+1]=Cellnum[cell3].GroupEdge_T1[j];			}			Cellnum[cell3].GroupVertex[j3+1]=vertex2;			Cellnum[cell3].GroupEdge[j3]=i;					jmax=Cellnum[cell3].GroupVertex.size();			for (int k=0; k<2; k++) {				if (Edge[Cellnum[cell3].GroupEdge[(j3+1)%jmax]].Edge_Vertex[k]==vertex1) {					Edge[Cellnum[cell3].GroupEdge[(j3+1)%jmax]].Edge_Vertex[k]=vertex2;				}			}				//cell4			jmax=Cellnum[cell4].GroupVertex.size();			Cellnum[cell4].GroupVertex.push_back(int());			Cellnum[cell4].GroupEdge.push_back(int());			Cellnum[cell4].GroupVertex_h.push_back(Vertex());			Cellnum[cell4].GroupEdge_h.push_back(Vertex());						for (int j=0; j<jmax; j++) {				if (Cellnum[cell4].GroupVertex[j]==vertex2) {					j4=j;				}			}			for (int j=jmax-1; j>j4; j--) {				Cellnum[cell4].GroupVertex[j+1]=Cellnum[cell4].GroupVertex_T1[j];			}			for (int j=jmax-1; j>j4-1; j--) {				Cellnum[cell4].GroupEdge[j+1]=Cellnum[cell4].GroupEdge_T1[j];			}			Cellnum[cell4].GroupVertex[j4+1]=vertex1;			Cellnum[cell4].GroupEdge[j4]=i;						jmax=Cellnum[cell4].GroupVertex.size();			for (int k=0; k<2; k++) {				if (Edge[Cellnum[cell4].GroupEdge[(j4+1)%jmax]].Edge_Vertex[k]==vertex2) {					Edge[Cellnum[cell4].GroupEdge[(j4+1)%jmax]].Edge_Vertex[k]=vertex1;				}			}					//Address change by rearrangement for remaining cells			for (int k=0; k<3; k++) {				if (Vertices[vertex1].NeighborCell[k]==cell1) {					Vertices[vertex1].NeighborCell[k]=cell4;				}			}						for (int k=0; k<3; k++) {				if (Vertices[vertex2].NeighborCell[k]==cell2) {					Vertices[vertex2].NeighborCell[k]=cell3;				}			}						jmax=Cellnum[cell2].GroupVertex.size();			for (int k=0; k<3; k++) {				if (Vertices[vertex1].NeighborVertex[k]==vertex2) {					Vertices[vertex1].NeighborVertex[(k+1)%3]=Vertices[vertex1].NeighborVertex[(k+2)%3];					Vertices[vertex1].NeighborVertex[(k+2)%3]=Cellnum[cell2].GroupVertex[(j2+jmax-1)%jmax];				}			}						for (int k=0; k<3; k++) {				if (Vertices[Cellnum[cell2].GroupVertex[(j2+jmax-1)%jmax]].NeighborVertex[k]==vertex2) {					Vertices[Cellnum[cell2].GroupVertex[(j2+jmax-1)%jmax]].NeighborVertex[k]=vertex1;				}			}					jmax=Cellnum[cell1].GroupVertex.size();			for (int k=0; k<3; k++) {				if (Vertices[vertex2].NeighborVertex[k]==vertex1) {					Vertices[vertex2].NeighborVertex[(k+1)%3]=Vertices[vertex2].NeighborVertex[(k+2)%3];					Vertices[vertex2].NeighborVertex[(k+2)%3]=Cellnum[cell1].GroupVertex[(j1+jmax-1)%jmax];				}			}								for (int k=0; k<3; k++) {				if (Vertices[Cellnum[cell1].GroupVertex[(j1+jmax-1)%jmax]].NeighborVertex[k]==vertex1) {					Vertices[Cellnum[cell1].GroupVertex[(j1+jmax-1)%jmax]].NeighborVertex[k]=vertex2;				}			}						Edge[i].Edge_Area[0]=cell3;			Edge[i].Edge_Area[1]=cell4;						//Cellnum[cell3].GroupEdge_h[j3].k_api=2*k_3 +k_3_1*0;			//Cellnum[cell4].GroupEdge_h[j4].k_api=2*k_3 +k_3_1*0;						T1_count+=1;					//cout << "T1" <<"	"<<i<<endl;			} //cell vertex-number			Edge[i].T1_flag=-qmax*0.005;//0.005		} // T1_flag	} //edge}//T1 close//cell exclusion, T2 transitionvoid Tissue::T2_cell() {	int shape, cell_d,death_flag;	int cell_1,cell_2,cell_3;	int vertex_1,vertex_2,vertex_3,new_vertex;	int vertex_4,vertex_5,vertex_6;	int edge_1,edge_2,edge_3;	int j_1, j_2, j_3, j_T2;	double xnew_vertex,ynew_vertex,znew_vertex;	j_1=0;	j_2=0;	j_3=0;		imax=Cellnum.size();	for (i=0; i<imax; i++) {		death_flag=0;		shape=Cellnum[i].GroupVertex.size();		//determine death cell		if (Cellnum[i].Area<0.5*Area_ave1 && shape<4 && Cellnum[i].cell_type!=-1) {			cell_d=i;			death_flag=1;		}				//cell_death		if (death_flag==1){			Cellnum[cell_d].cell_type=-1;//death			Cellnum[cell_d].k_area=0;			Cellnum[cell_d].k_peri=0;			Cellnum[cell_d].time_division=-1;						cout <<"T2"<< cell_d <<endl;						//vertex_determine			vertex_1=Cellnum[cell_d].GroupVertex[0];			vertex_2=Cellnum[cell_d].GroupVertex[1];			vertex_3=Cellnum[cell_d].GroupVertex[2];						xnew_vertex=(Vertices[vertex_1].coordinate[0]+Vertices[vertex_2].coordinate[0]+Vertices[vertex_3].coordinate[0])/3;			ynew_vertex=(Vertices[vertex_1].coordinate[1]+Vertices[vertex_2].coordinate[1]+Vertices[vertex_3].coordinate[1])/3;			znew_vertex=(Vertices[vertex_1].coordinate[2]+Vertices[vertex_2].coordinate[2]+Vertices[vertex_3].coordinate[2])/3;						new_vertex=Vertices.size();//new_vertex			Vertices.push_back(Vertex());			Vertices[new_vertex].coordinate[0]=xnew_vertex;			Vertices[new_vertex].coordinate[1]=ynew_vertex;			Vertices[new_vertex].coordinate[2]=znew_vertex;			Vertices[new_vertex].vertex_type=0;						Vertices[vertex_1].vertex_type=1;//death			Vertices[vertex_2].vertex_type=1;			Vertices[vertex_3].vertex_type=1;						//neighbor cell determine edge_determine			for (k=0; k<2; k++){			if(Edge[Cellnum[cell_d].GroupEdge[0]].Edge_Area[k]==cell_d){			cell_1=Edge[Cellnum[cell_d].GroupEdge[0]].Edge_Area[(k+1)%2];			}			}			for (k=0; k<2; k++){			if(Edge[Cellnum[cell_d].GroupEdge[1]].Edge_Area[k]==cell_d){			cell_2=Edge[Cellnum[cell_d].GroupEdge[1]].Edge_Area[(k+1)%2];			}			}			for (k=0; k<2; k++){			if(Edge[Cellnum[cell_d].GroupEdge[2]].Edge_Area[k]==cell_d){			cell_3=Edge[Cellnum[cell_d].GroupEdge[2]].Edge_Area[(k+1)%2];			}			}						//record before T2 			Cellnum[cell_1].GroupVertex_T2.assign(Cellnum[cell_1].GroupVertex.begin(), Cellnum[cell_1].GroupVertex.end());			Cellnum[cell_1].GroupEdge_T2.assign(Cellnum[cell_1].GroupEdge.begin(), Cellnum[cell_1].GroupEdge.end());			Cellnum[cell_2].GroupVertex_T2.assign(Cellnum[cell_2].GroupVertex.begin(), Cellnum[cell_2].GroupVertex.end());			Cellnum[cell_2].GroupEdge_T2.assign(Cellnum[cell_2].GroupEdge.begin(), Cellnum[cell_2].GroupEdge.end());			Cellnum[cell_3].GroupVertex_T2.assign(Cellnum[cell_3].GroupVertex.begin(), Cellnum[cell_3].GroupVertex.end());			Cellnum[cell_3].GroupEdge_T2.assign(Cellnum[cell_3].GroupEdge.begin(), Cellnum[cell_3].GroupEdge.end());									//neighborcell_1			jmax=Cellnum[cell_1].GroupVertex.size();			for(j=0; j<jmax; j++){			if(Cellnum[cell_1].GroupVertex[j]==vertex_1){				j_1=j;				vertex_4=Cellnum[cell_1].GroupVertex[(j+1)%jmax];			}			}			//setting new vertex neighbor information			for (k=0; k<2; k++){				if(Edge[Cellnum[cell_1].GroupEdge_T2[(j_1)%jmax]].Edge_Vertex[k]==vertex_1){					Edge[Cellnum[cell_1].GroupEdge_T2[(j_1)%jmax]].Edge_Vertex[k]=new_vertex;					}				 }			for (k=0; k<2; k++){			if(Edge[Cellnum[cell_1].GroupEdge_T2[(j_1-2+jmax)%jmax]].Edge_Vertex[k]==vertex_2){				Edge[Cellnum[cell_1].GroupEdge_T2[(j_1-2+jmax)%jmax]].Edge_Vertex[k]=new_vertex;				}			 }			for (k=0; k<3; k++){				if(Vertices[Cellnum[cell_1].GroupVertex_T2[(j_1+1)%jmax]].NeighborCell[k]==cell_d){				Vertices[Cellnum[cell_1].GroupVertex_T2[(j_1+1)%jmax]].NeighborCell[k]=cell_2;				}			 }			for (k=0; k<3; k++){				if(Vertices[Cellnum[cell_1].GroupVertex_T2[(j_1+1)%jmax]].NeighborVertex[k]==vertex_1){				Vertices[Cellnum[cell_1].GroupVertex_T2[(j_1+1)%jmax]].NeighborVertex[k]=new_vertex;				}			 }			for (k=0; k<3; k++){				if(Vertices[Cellnum[cell_1].GroupVertex_T2[(j_1-2+jmax)%jmax]].NeighborCell[k]==cell_d){				Vertices[Cellnum[cell_1].GroupVertex_T2[(j_1-2+jmax)%jmax]].NeighborCell[k]=cell_2;				}			 }			for (k=0; k<3; k++){				if(Vertices[Cellnum[cell_1].GroupVertex_T2[(j_1-2+jmax)%jmax]].NeighborVertex[k]==vertex_2){				Vertices[Cellnum[cell_1].GroupVertex_T2[(j_1-2+jmax)%jmax]].NeighborVertex[k]=new_vertex;				}			 }						//setting cell vertex and edge			j_T2=0;			for (j=0; j<j_1-1; j++) {				Cellnum[cell_1].GroupVertex[j_T2]=Cellnum[cell_1].GroupVertex_T2[j];				j_T2+=1;			}			Cellnum[cell_1].GroupVertex[j_T2]=new_vertex;			j_T2+=1;			for (j=j_1+1; j<jmax; j++) {				Cellnum[cell_1].GroupVertex[j_T2]=Cellnum[cell_1].GroupVertex_T2[j];				j_T2+=1;			}			j_T2=0;			for (j=0; j<j_1-1; j++) {				Cellnum[cell_1].GroupEdge[j_T2]=Cellnum[cell_1].GroupEdge_T2[j];				j_T2+=1;			}			Cellnum[cell_1].GroupEdge[j_T2]=Cellnum[cell_1].GroupEdge_T2[j_1];			j_T2+=1;			for (j=j_1+1; j<jmax; j++) {				Cellnum[cell_1].GroupEdge[j_T2]=Cellnum[cell_1].GroupEdge_T2[j];				j_T2+=1;			}			Cellnum[cell_1].GroupVertex.pop_back();			Cellnum[cell_1].GroupEdge.pop_back();			Cellnum[cell_1].GroupVertex_h.pop_back();			Cellnum[cell_1].GroupEdge_h.pop_back();						//neighborcell2		jmax=Cellnum[cell_2].GroupVertex.size();		for(j=0; j<jmax; j++){		if(Cellnum[cell_2].GroupVertex[j]==vertex_2){			j_2=j;			vertex_5=Cellnum[cell_2].GroupVertex[(j+1)%jmax];		}		}			//setting new vertex neighbor information			for (k=0; k<2; k++){				if(Edge[Cellnum[cell_2].GroupEdge_T2[(j_2)%jmax]].Edge_Vertex[k]==vertex_2){					Edge[Cellnum[cell_2].GroupEdge_T2[(j_2)%jmax]].Edge_Vertex[k]=new_vertex;				}			}			for (k=0; k<2; k++){				if(Edge[Cellnum[cell_2].GroupEdge_T2[(j_2-2+jmax)%jmax]].Edge_Vertex[k]==vertex_3){					Edge[Cellnum[cell_2].GroupEdge_T2[(j_2-2+jmax)%jmax]].Edge_Vertex[k]=new_vertex;				}			}			for (k=0; k<3; k++){				if(Vertices[Cellnum[cell_2].GroupVertex_T2[(j_2+1)%jmax]].NeighborCell[k]==cell_d){				Vertices[Cellnum[cell_2].GroupVertex_T2[(j_2+1)%jmax]].NeighborCell[k]=cell_3;				}			 }			for (k=0; k<3; k++){				if(Vertices[Cellnum[cell_2].GroupVertex_T2[(j_2+1)%jmax]].NeighborVertex[k]==vertex_2){				Vertices[Cellnum[cell_2].GroupVertex_T2[(j_2+1)%jmax]].NeighborVertex[k]=new_vertex;				}			 }			for (k=0; k<3; k++){				if(Vertices[Cellnum[cell_2].GroupVertex_T2[(j_2-2+jmax)%jmax]].NeighborCell[k]==cell_d){				Vertices[Cellnum[cell_2].GroupVertex_T2[(j_2-2+jmax)%jmax]].NeighborCell[k]=cell_3;				}			 }			for (k=0; k<3; k++){				if(Vertices[Cellnum[cell_2].GroupVertex_T2[(j_2-2+jmax)%jmax]].NeighborVertex[k]==vertex_3){				Vertices[Cellnum[cell_2].GroupVertex_T2[(j_2-2+jmax)%jmax]].NeighborVertex[k]=new_vertex;				}			 }						//setting cell vertex and edge			j_T2=0;			for (j=0; j<j_2-1; j++) {				Cellnum[cell_2].GroupVertex[j_T2]=Cellnum[cell_2].GroupVertex_T2[j];				j_T2+=1;			}			Cellnum[cell_2].GroupVertex[j_T2]=new_vertex;			j_T2+=1;			for (j=j_2+1; j<jmax; j++) {				Cellnum[cell_2].GroupVertex[j_T2]=Cellnum[cell_2].GroupVertex_T2[j];				j_T2+=1;			}			j_T2=0;			for (j=0; j<j_2-1; j++) {				Cellnum[cell_2].GroupEdge[j_T2]=Cellnum[cell_2].GroupEdge_T2[j];				j_T2+=1;			}			Cellnum[cell_2].GroupEdge[j_T2]=Cellnum[cell_2].GroupEdge_T2[j_2];			j_T2+=1;			for (j=j_2+1; j<jmax; j++) {				Cellnum[cell_2].GroupEdge[j_T2]=Cellnum[cell_2].GroupEdge_T2[j];				j_T2+=1;			}			Cellnum[cell_2].GroupVertex.pop_back();			Cellnum[cell_2].GroupEdge.pop_back();			Cellnum[cell_2].GroupVertex_h.pop_back();			Cellnum[cell_2].GroupEdge_h.pop_back();					//neighborcell3		 jmax=Cellnum[cell_3].GroupVertex.size();		 for(j=0; j<jmax; j++){		 if(Cellnum[cell_3].GroupVertex[j]==vertex_3){			 j_3=j;			 vertex_6=Cellnum[cell_3].GroupVertex[(j+1)%jmax];		 }		 }			//setting new vertex neighbor information			for (k=0; k<2; k++){				 if(Edge[Cellnum[cell_3].GroupEdge_T2[(j_3)%jmax]].Edge_Vertex[k]==vertex_3){					 Edge[Cellnum[cell_3].GroupEdge_T2[(j_3)%jmax]].Edge_Vertex[k]=new_vertex;					 }				  }			for (k=0; k<2; k++){				if(Edge[Cellnum[cell_3].GroupEdge_T2[(j_3-2+jmax)%jmax]].Edge_Vertex[k]==vertex_1){					Edge[Cellnum[cell_3].GroupEdge_T2[(j_3-2+jmax)%jmax]].Edge_Vertex[k]=new_vertex;					}				 }			 for (k=0; k<3; k++){				 if(Vertices[Cellnum[cell_3].GroupVertex_T2[(j_3+1)%jmax]].NeighborCell[k]==cell_d){					 Vertices[Cellnum[cell_3].GroupVertex_T2[(j_3+1)%jmax]].NeighborCell[k]=cell_1;				 }			  }			 for (k=0; k<3; k++){				 if(Vertices[Cellnum[cell_3].GroupVertex_T2[(j_3+1)%jmax]].NeighborVertex[k]==vertex_3){					 Vertices[Cellnum[cell_3].GroupVertex_T2[(j_3+1)%jmax]].NeighborVertex[k]=new_vertex;				 }			  }			for (k=0; k<3; k++){				if(Vertices[Cellnum[cell_3].GroupVertex_T2[(j_3-2+jmax)%jmax]].NeighborCell[k]==cell_d){					Vertices[Cellnum[cell_3].GroupVertex_T2[(j_3-2+jmax)%jmax]].NeighborCell[k]=cell_1;				}			 }			for (k=0; k<3; k++){				if(Vertices[Cellnum[cell_3].GroupVertex_T2[(j_3-2+jmax)%jmax]].NeighborVertex[k]==vertex_1){					Vertices[Cellnum[cell_3].GroupVertex_T2[(j_3-2+jmax)%jmax]].NeighborVertex[k]=new_vertex;				}			 }						//setting cell vertex and edge			j_T2=0;			for (j=0; j<j_3-1; j++) {				Cellnum[cell_3].GroupVertex[j_T2]=Cellnum[cell_3].GroupVertex_T2[j];				j_T2+=1;			}			Cellnum[cell_3].GroupVertex[j_T2]=new_vertex;			j_T2+=1;			for (j=j_3+1; j<jmax; j++) {				Cellnum[cell_3].GroupVertex[j_T2]=Cellnum[cell_3].GroupVertex_T2[j];				j_T2+=1;			}			j_T2=0;			for (j=0; j<j_3-1; j++) {				Cellnum[cell_3].GroupEdge[j_T2]=Cellnum[cell_3].GroupEdge_T2[j];				j_T2+=1;			}			Cellnum[cell_3].GroupEdge[j_T2]=Cellnum[cell_3].GroupEdge_T2[j_3];			j_T2+=1;			for (j=j_3+1; j<jmax; j++) {				Cellnum[cell_3].GroupEdge[j_T2]=Cellnum[cell_3].GroupEdge_T2[j];				j_T2+=1;			}					Cellnum[cell_3].GroupVertex.pop_back();					Cellnum[cell_3].GroupEdge.pop_back();					Cellnum[cell_3].GroupVertex_h.pop_back();					Cellnum[cell_3].GroupEdge_h.pop_back();						//setting new vertex information			Vertices[new_vertex].NeighborVertex.push_back(vertex_4);			Vertices[new_vertex].NeighborVertex.push_back(vertex_5);			Vertices[new_vertex].NeighborVertex.push_back(vertex_6);			Vertices[new_vertex].NeighborCell.push_back(cell_2);			Vertices[new_vertex].NeighborCell.push_back(cell_3);			Vertices[new_vertex].NeighborCell.push_back(cell_1);			Vertices[new_vertex].vertex_r0=tissue_r0;			Vertices[new_vertex].k_ball=k_4*1;			T2_count+=1;		} //death	} //cell_i}// T2 closevoid Tissue::output(int a) {    //coordinate	stringstream filename;	filename << "/filelocation/data3D_band/z_cellform" << a << ".dat";// 0tukerutoki setw(4) << setfill('0') <<	ofs[a].open(filename.str());	jmax=Cellnum.size();	for (j=0; j<jmax; j++) {		kmax=Cellnum[j].GroupVertex.size();//		for (k=0; k<kmax; k++) {            ofs[a]<<Vertices[Cellnum[j].GroupVertex[k]].coordinate[0] <<"	"<< Vertices[Cellnum[j].GroupVertex[k]].coordinate[1] <<"	"<< Vertices[Cellnum[j].GroupVertex[k]].coordinate[2] <<"	";		}		ofs[a] << endl;	}	ofs[a].close();		//diffusion	stringstream filename01;	filename01 << "/filelocation/data3D_band/z_diffusion" << a << ".dat";// 0tukerutoki setw(4) << setfill('0') <<	ofs[a].open(filename01.str());		jmax=Cellnum.size();		for (j=0; j<jmax; j++) {			ofs[a] << Cellnum[j].diff[0] <<"	"<<Cellnum[j].diff[1]<<"	"<<Cellnum[j].diff[2]<<"	"<<Cellnum[j].diff[3];			ofs[a] << endl;		}		ofs[a].close();	    //celltype	stringstream filename02;	filename02 << "/filelocation/data3D_band/z_celltype" << a << ".dat";// 0tukerutoki setw(4) << setfill('0') <<	ofs[a].open(filename02.str());	jmax=Cellnum.size();	for (j=0; j<jmax; j++) {		ofs[a] <<	Cellnum[j].cell_type<<"	"<<	Cellnum[j].cell_lineage;		ofs[a] << endl;	}	ofs[a].close();	    //stress    /*stringstream filename03;    filename03 << "/Users/fujiwara/Desktop/vertex_spider/data3D_band/z_stresstensor" << a << ".dat";// 0tukerutoki setw(4) << setfill('0') <<    ofs[a].open(filename03.str());    jmax=Cellnum.size();    for (j=0; j<jmax; j++) {        ofs[a] <<    Cellnum[j].S1 <<" " << Cellnum[j].S2 <<" " <<   Cellnum[j].Theta1 <<" " << Cellnum[j].Theta2;        ofs[a] << endl;	}    ofs[a].close();*/        //center    stringstream filename04;    filename04 << "/filelocation/data3D_band/z_centroid" << a << ".dat";// 0tukerutoki setw(4) << setfill('0') <<    ofs[a].open(filename04.str());    jmax=Cellnum.size();    for (j=0; j<jmax; j++) {        ofs[a] <<    Cellnum[j].centroid[0] <<"	"<< Cellnum[j].centroid[1]<<"	" << Cellnum[j].centroid[2];        ofs[a] << endl;    }    ofs[a].close();	    //vector	stringstream filename05;	  filename05 << "/filelocation/data3D_band/z_vertical_vector" << a << ".dat";// 0tukerutoki setw(4) << setfill('0') <<	  ofs[a].open(filename05.str());	  jmax=Cellnum.size();	  for (j=0; j<jmax; j++) {		  ofs[a] <<Cellnum[j].n_vector[0] <<"	" << Cellnum[j].n_vector[1]<<"	" << Cellnum[j].n_vector[2]<<"	" <<Cellnum[j].tiss_growth[0] <<"	" <<Cellnum[j].tiss_growth[1]<<"	" << Cellnum[j].tiss_growth[2];		  ofs[a] << endl;	  }	  ofs[a].close();    }void Tissue::output_result() {    stringstream filename0;	filename0 << "/filelocation/result_band/vertex_result.dat";// 0tukerutoki setw(4) << setfill('0') <<	ofs_result[0].open(filename0.str());	jmax=Vertices.size();//	for (j=0; j<jmax; j++) {        ofs_result[0]<<Vertices[j].coordinate[0]<<"	"<<Vertices[j].coordinate[1]<<"	"<<Vertices[j].coordinate[2]<<"	";		ofs_result[0] << endl;	}	ofs_result[0].close();		stringstream filename1;	filename1 << "/filelocation/result_band/cell-vertex_result.dat";// 0tukerutoki setw(4) << setfill('0') <<	ofs_result[1].open(filename1.str());	jmax=Cellnum.size();//	for (j=0; j<jmax; j++) {		kmax=Cellnum[j].GroupVertex.size();		for (k=0; k<kmax; k++) {			ofs_result[1] << Cellnum[j].GroupVertex[k] <<"	";		}		ofs_result[1] << endl;	}	ofs_result[1].close();		stringstream filename2;	filename2 << "/filelocation/result_band/neighborcell_result.dat";// 0tukerutoki setw(4) << setfill('0') <<	ofs_result[2].open(filename2.str());	jmax=Vertices.size();//	for (j=0; j<jmax; j++) {		kmax=Vertices[j].NeighborCell.size();//		for (k=0; k<kmax; k++) {			ofs_result[2] << Vertices[j].NeighborCell[k] <<"	";		}		ofs_result[2] << endl;	}	ofs_result[2].close();		stringstream filename3;	filename3 << "/filelocation/result_band/neighborvertex_result.dat";// 0tukerutoki setw(4) << setfill('0') <<	ofs_result[3].open(filename3.str());	jmax=Vertices.size();//	for (j=0; j<jmax; j++) {		kmax=Vertices[j].NeighborVertex.size();//		for (k=0; k<kmax; k++) {			ofs_result[3] << Vertices[j].NeighborVertex[k] <<"	";		}		ofs_result[3] << endl;	}	ofs_result[3].close();		stringstream filename4;	filename4 << "/filelocation/result_band/cell-cordinate_result.dat";// 0tukerutoki setw(4) << setfill('0') <<	ofs_result[4].open(filename4.str());	jmax=Cellnum.size();//	for (j=0; j<jmax; j++) {		kmax=Cellnum[j].GroupVertex.size();		for (k=0; k<kmax; k++) {			ofs_result[4] <<Vertices[Cellnum[j].GroupVertex[k]].coordinate[0] <<			"	" << Vertices[Cellnum[j].GroupVertex[k]].coordinate[1] <<            "	" << Vertices[Cellnum[j].GroupVertex[k]].coordinate[2] <<"	";		}		ofs_result[4] << endl;	}	ofs_result[4].close();		stringstream filename5;	filename5 << "/filelocation/result_band/cellArea_result.dat";// 0tukerutoki setw(4) << setfill('0') <<	ofs_result[5].open(filename5.str());	jmax=Cellnum.size();//	for (j=0; j<jmax; j++) {		ofs_result[5] << Cellnum[j].Area ;		ofs_result[5] << endl;	}	ofs_result[5].close();		stringstream filename6;	filename6 << "/filelocation/result_band/cell-edge_result.dat";// 0tukerutoki setw(4) << setfill('0') <<	ofs_result[6].open(filename6.str());	jmax=Cellnum.size();//	for (j=0; j<jmax; j++) {		kmax=Cellnum[j].GroupEdge.size();		for (k=0; k<kmax; k++) {			ofs_result[6] << Cellnum[j].GroupEdge[k] << "	" ;		}		ofs_result[6] << endl;	}	ofs_result[6].close();		stringstream filename7;	filename7 << "/filelocation/result_band/edge-vertex_result.dat";// 0tukerutoki setw(4) << setfill('0') <<	ofs_result[7].open(filename7.str());	jmax=Edge.size();//	for (j=0; j<jmax; j++) {		kmax=2;//		for (k=0; k<kmax; k++) {			ofs_result[7] << Edge[j].Edge_Vertex[k] << "	"  ;		}		ofs_result[7] << endl;	}	ofs_result[7].close();		stringstream filename8;	filename8 << "/filelocation/result_band/edge-cell_result.dat";// 0tukerutoki setw(4) << setfill('0') <<	ofs_result[8].open(filename8.str());	jmax=Edge.size();//	for (j=0; j<jmax; j++) {		kmax=2;//		for (k=0; k<kmax; k++) {			ofs_result[8] << Edge[j].Edge_Area[k] << "	"  ;		}		ofs_result[8] << endl;	}	ofs_result[8].close();	stringstream filename9;	filename9 << "/filelocation/result_band/celltype_result.dat";// 0tukerutoki setw(4) << setfill('0') <<	ofs_result[9].open(filename9.str());	jmax=Cellnum.size();//	for (j=0; j<jmax; j++) {		ofs_result[9] << Cellnum[j].cell_type ;		ofs_result[9] << endl;	}	ofs_result[9].close();	    stringstream filename10;    filename10 << "/filelocation/result_band/cell-centroid_result.dat";// 0tukerutoki setw(4) << setfill('0') <<    ofs_result[10].open(filename10.str());    jmax=Cellnum.size();//    for (j=0; j<jmax; j++) {        ofs_result[10] << Cellnum[j].centroid[0]<<        "	" << Cellnum[j].centroid[1]<<        "	"  << Cellnum[j].centroid[2]<<"	";        ofs_result[10] <<endl;    }    ofs_result[10].close();    } //output_resultvoid Tissue::output_barometer(int c) {	//cell-number	int head_num;	int middle_num;	int tail_num;	head_num=0;	middle_num=0;	tail_num=0;		stringstream filenameb1;	filenameb1 << "/filelocation/barometer_band/cell_number"<<c<<".dat";// 0tukerutoki setw(4) << setfill('0') <<	ofs_barometer[c].open(filenameb1.str());		imax=Cellnum.size();//	for (i=0; i<imax; i++) {		if (Cellnum[i].cell_type==1) {			middle_num+=1;		}		if (Cellnum[i].cell_type==3) {			head_num+=1;		}		if (Cellnum[i].cell_type==5) {			tail_num+=1;		}	}		ofs_barometer[c] <<	head_num << endl;		ofs_barometer[c] <<	middle_num << endl;		ofs_barometer[c] <<	tail_num << endl;		ofs_barometer[c].close();		//cell geometory	double celledge_ave;	double cell_cell_ave;		stringstream filenameb2;	filenameb2 << "/filelocation/barometer_band/cell_geometory"<<c<<".dat";// 0tukerutoki setw(4) << setfill('0') <<	ofs_barometer[c].open(filenameb2.str());		imax=Cellnum.size();//	for (i=0; i<imax; i++) {		if (Cellnum[i].cell_type==1 || Cellnum[i].cell_type==3 || Cellnum[i].cell_type==5) {			jmax=Cellnum[i].GroupVertex.size();			celledge_ave=0;			cell_cell_ave=0;			for (j=0; j<jmax; j++) {				celledge_ave+=Cellnum[i].GroupEdge_h[j%jmax].R_edge;				cell_cell_ave+=sqrt(pow(Cellnum[Cellnum[i].GroupEdge_h[j%jmax].tissue_nc_center].centroid[0]-Cellnum[i].centroid[0],2)+pow(Cellnum[Cellnum[i].GroupEdge_h[j%jmax].tissue_nc_center].centroid[1]-Cellnum[i].centroid[1],2)+pow(Cellnum[Cellnum[i].GroupEdge_h[j%jmax].tissue_nc_center].centroid[2]-Cellnum[i].centroid[2],2));			}			celledge_ave=celledge_ave/jmax;			cell_cell_ave=cell_cell_ave/jmax;			ofs_barometer[c] <<	i <<"	"<< Cellnum[i].Area <<"	"<< celledge_ave <<"	"<< cell_cell_ave <<"	"<< jmax <<endl;		}	}	ofs_barometer[c].close();		//tissue geometory	int tail_top, head_top, tail_middle, head_middle, LppR,LppL;		stringstream filenameb3;	filenameb3 << "/filelocation/barometer_band/tissue_geometory"<<c<<".dat";// 0tukerutoki setw(4) << setfill('0') <<	ofs_barometer[c].open(filenameb3.str());		tail_top=i_north;	imax=Cellnum.size();	for (i=0; i<imax; i++) {		if(Cellnum[i].cell_type==5){			if ((Cellnum[i].centroid[1]>Cellnum[tail_top].centroid[1]) && (abs(Cellnum[i].centroid[2])<10)){					tail_top=i;			}		}	}	ofs_barometer[c]<<tail_top <<"	"<<Cellnum[tail_top].centroid[0] <<"	"<<Cellnum[tail_top].centroid[1]<<"	"<<Cellnum[tail_top].centroid[2]<<endl;		head_top=tail_top;	imax=Cellnum.size();	for (i=0; i<imax; i++) {		if(Cellnum[i].cell_type==3){			if ((Cellnum[i].centroid[0]>Cellnum[head_top].centroid[0]) && (abs(Cellnum[i].centroid[2])<10)){					head_top=i;			}		}	}	ofs_barometer[c]<<head_top <<"	"<<Cellnum[head_top].centroid[0] <<"	"<<Cellnum[head_top].centroid[1]<<"	"<<Cellnum[head_top].centroid[2]<<endl;		tail_middle=tail_top;	imax=Cellnum.size();	for (i=0; i<imax; i++) {		if(Cellnum[i].cell_type==5){			if ((Cellnum[i].centroid[1]<Cellnum[tail_middle].centroid[1]) && (abs(Cellnum[i].centroid[2])<10)){					tail_middle=i;			}		}	}	ofs_barometer[c]<<tail_middle <<"	"<<Cellnum[tail_middle].centroid[0] <<"	"<<Cellnum[tail_middle].centroid[1]<<"	"<<Cellnum[tail_middle].centroid[2]<<endl;        tail_boundary=tail_middle;//celltype change    	head_middle=head_top;	imax=Cellnum.size();	for (i=0; i<imax; i++) {		if(Cellnum[i].cell_type==3){			if ((Cellnum[i].centroid[0]<Cellnum[head_middle].centroid[0]) && (abs(Cellnum[i].centroid[2])<10)){					head_middle=i;			}		}	}	ofs_barometer[c]<<head_middle <<"	"<<Cellnum[head_middle].centroid[0] <<"	"<<Cellnum[head_middle].centroid[1]<<"	"<<Cellnum[head_middle].centroid[2]<<endl;		LppR=0;	LppL=0;	imax=Vertices.size();	for (i=0; i<imax; i++) {		for (j=0; j<3; j++) {			if (Cellnum[Vertices[i].NeighborCell[j]].cell_type==3){				if (Cellnum[Vertices[i].NeighborCell[(j+1)%3]].cell_type==1){					if (Cellnum[Vertices[i].NeighborCell[(j+2)%3]].cell_type==6){					LppR=Vertices[i].NeighborCell[j];					}				}				if (Cellnum[Vertices[i].NeighborCell[(j+1)%3]].cell_type==6){					if (Cellnum[Vertices[i].NeighborCell[(j+2)%3]].cell_type==1){					LppL=Vertices[i].NeighborCell[j];					}				}			}		}	}	ofs_barometer[c]<<LppR <<"	"<<Cellnum[LppR].centroid[0] <<"	"<<Cellnum[LppR].centroid[1]<<"	"<<Cellnum[LppR].centroid[2]<<endl;	ofs_barometer[c]<<LppL <<"	"<<Cellnum[LppL].centroid[0] <<"	"<<Cellnum[LppL].centroid[1]<<"	"<<Cellnum[LppL].centroid[2]<<endl;		ofs_barometer[c].close();	    //tissue shape    int t_shape;    t_shape=0;    stringstream filenameb4;    filenameb4 << "/filelocation/barometer_band/tissue_shape"<<c<<".dat";// 0tukerutoki setw(4) << setfill('0') <<    ofs_barometer[c].open(filenameb4.str());    imax=Cellnum.size();    for (i=0; i<imax; i++) {        if (Cellnum[i].cell_type==1 || Cellnum[i].cell_type==3 || Cellnum[i].cell_type==5) {            jmax=Cellnum[i].GroupEdge.size();            for (j=0; j<jmax; j++){                for (k=0; k<2; k++) {                if(Cellnum[Edge[Cellnum[i].GroupEdge[j]].Edge_Area[k]].cell_type==6 || Cellnum[Edge[Cellnum[i].GroupEdge[j]].Edge_Area[k]].cell_type==2){                    t_shape=1;                }                }            }            if (t_shape==1) {                ofs_barometer[c]<<i <<"	"<<Cellnum[i].centroid[0] <<"	"<<Cellnum[i].centroid[1]<<"	"<<Cellnum[i].centroid[2]<<endl;                t_shape=0;            }        }    }                        ofs_barometer[c].close();    } //output_barometerint main(){	srand48((unsigned int)time(NULL));     srand((unsigned int)time(NULL));	int i,imax;	int j,jmax;	int k,kmax;	int p,q,o,s,t,a=0;    double b=0;	double c=0;	Cell cell;	Vertex vert;	Tissue tiss;		tiss.firststage();	tiss.cellgroup();	tiss.firstset_cell();	tiss.Geometory_cell();	tiss.output(a);	a++;    	 cout << "start" <<endl;	//step by step    for (t=0; t<tmax; t++){	for (q=0; q<qmax; q++) {		for (p=0; p<pmax; p++) {			tiss.VertexDynamics();			tiss.Geometory_cell();		}		for(s=0; s<smax; s++) {			tiss.Reaction();			tiss.Diffusion();		}		tiss.Division(q+qmax*t);		tiss.Geometory_cell();		tiss.T1_cell();		tiss.Geometory_cell();		tiss.T2_cell();		tiss.Geometory_cell();		tiss.Growth(q+qmax*t);		//tiss.Geometory_cell();				//time step        if (q+qmax*t==10*a) {            tiss.output(a);            a++;        }		//stage step		if (q+qmax*t==850*c) {            tiss.output_barometer(c);            c++;        }	}    }    	tiss.output_result();	tiss.output_barometer(c);		cout << "finish" <<"	"<<tiss.Cellnum.size()<<"	"<<tiss.T1_count <<"	"<<tiss.T2_count<<endl;	return 0;}